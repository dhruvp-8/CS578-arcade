<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="84" tokens="763">
<file line="215" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/AnnotationXWorkConverterTest.java"/>
<file line="271" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        List<String> list = new ArrayList<>();
        list.add("foo");
        list.add("bar");
        list.add("baz");
        assertEquals(list, converter.convertValue(context, null, null, null, new String[]{
                "foo", "bar", "baz"
        }, List.class));
    }

    public void testStringArrayToPrimitiveWrappers() {
        Long[] longs = (Long[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, Long[].class);
        assertNotNull(longs);
        assertTrue(Arrays.equals(new Long[]{123L, 456L}, longs));

        Integer[] ints = (Integer[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, Integer[].class);
        assertNotNull(ints);
        assertTrue(Arrays.equals(new Integer[]{123, 456}, ints));

        Double[] doubles = (Double[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, Double[].class);
        assertNotNull(doubles);
        assertTrue(Arrays.equals(new Double[]{123D, 456D}, doubles));

        Float[] floats = (Float[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, Float[].class);
        assertNotNull(floats);
        assertTrue(Arrays.equals(new Float[]{123F, 456F}, floats));

        Boolean[] booleans = (Boolean[]) converter.convertValue(context, null, null, null, new String[]{
                "true", "false"
        }, Boolean[].class);
        assertNotNull(booleans);
        assertTrue(Arrays.equals(new Boolean[]{Boolean.TRUE, Boolean.FALSE}, booleans));
    }

    public void testStringArrayToPrimitives() throws OgnlException {
        long[] longs = (long[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, long[].class);
        assertNotNull(longs);
        assertTrue(Arrays.equals(new long[]{123, 456}, longs));

        int[] ints = (int[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, int[].class);
        assertNotNull(ints);
        assertTrue(Arrays.equals(new int[]{123, 456}, ints));

        double[] doubles = (double[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, double[].class);
        assertNotNull(doubles);
        assertTrue(Arrays.equals(new double[]{123, 456}, doubles));

        float[] floats = (float[]) converter.convertValue(context, null, null, null, new String[]{
                "123", "456"
        }, float[].class);
        assertNotNull(floats);
        assertTrue(Arrays.equals(new float[]{123, 456}, floats));

        boolean[] booleans = (boolean[]) converter.convertValue(context, null, null, null, new String[]{
                "true", "false"
        }, boolean[].class);
        assertNotNull(booleans);
        assertTrue(Arrays.equals(new boolean[]{true, false}, booleans));
    }

    public void testStringArrayToSet() {
        Set<String> list = new HashSet<>();
        list.add("foo");
        list.add("bar");
        list.add("baz");
        assertEquals(list, converter.convertValue(context, null, null, null, new String[]{
                "foo", "bar", "bar", "baz"
        }, Set.class));
    }

    public void testStringToCollectionConversion() {
]]>
</codefragment>
</duplication>
<duplication lines="71" tokens="544">
<file line="125" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/dispatcher/Jsr168DispatcherTest.java"/>
<file line="59" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/dispatcher/Jsr286DispatcherTest.java"/>
<codefragment>
<![CDATA[
	public void testRender_ok() {
		final Mock mockResponse = mock(RenderResponse.class);
		mockResponse.stubs().method(ANYTHING);

		PortletMode mode = PortletMode.VIEW;

		Map<String, String[]> requestParams = new HashMap<String, String[]>();
		requestParams.put(ACTION_PARAM, new String[] { "/view/testAction" });
		requestParams.put(EVENT_ACTION, new String[] { "true" });
		requestParams.put(MODE_PARAM, new String[] { mode.toString() });

		Map<String, Object> sessionMap = new HashMap<String, Object>();

		Map<String, String> initParams = new HashMap<String, String>();
		initParams.put("viewNamespace", "/view");
		initParams.put(StrutsConstants.STRUTS_ALWAYS_SELECT_FULL_NAMESPACE,
				"true");

		initPortletConfig(initParams, new HashMap<String, Object>());
		initRequest(requestParams, new HashMap<String, Object>(), sessionMap,
				PortletMode.VIEW, WindowState.NORMAL, false, null);
		setupActionFactory("/view", "testAction", "success",
				EasyMock.createNiceMock(ValueStack.class));

		mockInvocation.expects(once()).method("getStack")
				.will(returnValue(null));
		try {
			dispatcher
					.setActionProxyFactory((ActionProxyFactory) mockActionFactory
							.proxy());
			dispatcher.init((PortletConfig) mockConfig.proxy());
			dispatcher.render((RenderRequest) mockRequest.proxy(),
					(RenderResponse) mockResponse.proxy());
		} catch (Exception e) {
			e.printStackTrace();
			fail("Error occured");
		}
	}

	public void testProcessAction_ok() {
		final Mock mockResponse = mock(ActionResponse.class);

		PortletMode mode = PortletMode.VIEW;
		Map<String, String> initParams = new HashMap<String, String>();
		initParams.put("viewNamespace", "/view");

		Map<String, String[]> requestParams = new HashMap<String, String[]>();
		requestParams.put(ACTION_PARAM, new String[] { "/view/testAction" });
		requestParams.put(MODE_PARAM, new String[] { mode.toString() });

		initParams.put(StrutsConstants.STRUTS_ALWAYS_SELECT_FULL_NAMESPACE,
				"true");
		initPortletConfig(initParams, new HashMap<String, Object>());
		initRequest(requestParams, new HashMap<String, Object>(),
				new HashMap<String, Object>(), PortletMode.VIEW,
				WindowState.NORMAL, true, null);
		setupActionFactory("/view", "testAction", "success",
				EasyMock.createNiceMock(ValueStack.class));

		try {
			dispatcher
					.setActionProxyFactory((ActionProxyFactory) mockActionFactory
							.proxy());
			dispatcher.init((PortletConfig) mockConfig.proxy());
			dispatcher.processAction((ActionRequest) mockRequest.proxy(),
					(ActionResponse) mockResponse.proxy());
		} catch (Exception e) {
			e.printStackTrace();
			fail("Error occured");
		}
	}
]]>
</codefragment>
</duplication>
<duplication lines="94" tokens="534">
<file line="32" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/util/logging/commons/CommonsLogger.java"/>
<file line="31" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/util/logging/log4j2/Log4j2Logger.java"/>
<codefragment>
<![CDATA[
    public Log4j2Logger(org.apache.logging.log4j.Logger log) {
        this.log = log;
    }

    public void error(String msg, String... args) {
        log.error(LoggerUtils.format(msg, args));
    }

    public void error(String msg, Object... args) {
        log.error(LoggerUtils.format(msg, args));
    }

    public void error(String msg, Throwable ex, String... args) {
        log.error(LoggerUtils.format(msg, args), ex);
    }

    public void info(String msg, String... args) {
        log.info(LoggerUtils.format(msg, args));
    }

    public void info(String msg, Throwable ex, String... args) {
        log.info(LoggerUtils.format(msg, args), ex);
    }

    public boolean isInfoEnabled() {
        return log.isInfoEnabled();
    }

    public void warn(String msg, String... args) {
        log.warn(LoggerUtils.format(msg, args));
    }

    public void warn(String msg, Object... args) {
        log.warn(LoggerUtils.format(msg, args));
    }

    public void warn(String msg, Throwable ex, String... args) {
        log.warn(LoggerUtils.format(msg, args), ex);
    }
    
    public boolean isDebugEnabled() {
        return log.isDebugEnabled();
    }
    
    public void debug(String msg, String... args) {
        log.debug(LoggerUtils.format(msg, args));
    }

    public void debug(String msg, Object... args) {
        log.debug(LoggerUtils.format(msg, args));
    }

    public void debug(String msg, Throwable ex, String... args) {
        log.debug(LoggerUtils.format(msg, args), ex);
    }
    
    public boolean isTraceEnabled() {
        return log.isTraceEnabled();
    }
    
    public void trace(String msg, String... args) {
        log.trace(LoggerUtils.format(msg, args));
    }

    public void trace(String msg, Object... args) {
        log.trace(LoggerUtils.format(msg, args));
    }

    public void trace(String msg, Throwable ex, String... args) {
        log.trace(LoggerUtils.format(msg, args), ex);
    }


    public void fatal(String msg, String... args) {
        log.fatal(LoggerUtils.format(msg, args));
    }

    public void fatal(String msg, Throwable ex, String... args) {
        log.fatal(LoggerUtils.format(msg, args), ex);
    }

    public boolean isErrorEnabled() {
        return log.isErrorEnabled();
    }

    public boolean isFatalEnabled() {
        return log.isFatalEnabled();
    }

    public boolean isWarnEnabled() {
        return log.isWarnEnabled();
    }

}
]]>
</codefragment>
</duplication>
<duplication lines="168" tokens="532">
<file line="43" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/StrutsMockHttpServletRequest.java"/>
<file line="39" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/StrutsMockHttpServletRequest.java"/>
<codefragment>
<![CDATA[
public class StrutsMockHttpServletRequest extends MockHttpServletRequest {

    Locale locale = Locale.US;
    private Map attributes = new HashMap();
    private Map parameterMap = new HashMap();
    private String context = "";
    private String pathInfo = "";
    private String queryString;
    private String requestURI;
    private String scheme;
    private String serverName;
    private int serverPort;
    private String encoding;
    private String requestDispatherString;


    public void setAttribute(String s, Object o) {
        attributes.put(s, o);
    }

    public Object getAttribute(String s) {
        return attributes.get(s);
    }

    public Enumeration getAttributeNames() {
        Vector v = new Vector();
        v.addAll(attributes.keySet());

        return v.elements();
    }

    public String getContextPath() {
        return this.context;
    }

    public void setLocale(Locale locale) {
        this.locale = locale;
    }

    public Locale getLocale() {
        return locale;
    }

    public void setCharacterEncoding(String s) {
        this.encoding = s;
    }

    public String getCharacterEncoding() {
        return encoding;
    }

    public void setParameterMap(Map parameterMap) {
        this.parameterMap = parameterMap;
    }

    public Map getParameterMap() {
        return parameterMap;
    }

    public String getParameter(String string) {
        return (String) parameterMap.get(string);
    }

    public Enumeration getParameterNames() {
        return Collections.enumeration(parameterMap.keySet());
    }

    public String[] getParameterValues(String string) {
        return (String[]) parameterMap.get(string);
    }

    public String getPathInfo() {
        return pathInfo;
    }

    public void setQueryString(String queryString) {
        this.queryString = queryString;
    }

    public String getQueryString() {
        return queryString;
    }

    public RequestDispatcher getRequestDispatcher(String string) {
        this.requestDispatherString = string;
        return super.getRequestDispatcher(string);
    }

    /**
     * Get's the source string that was used in the last getRequestDispatcher method call.
     */
    public String getRequestDispatherString() {
        return requestDispatherString;
    }

    public void setRequestURI(String requestURI) {
        this.requestURI = requestURI;
    }

    public String getRequestURI() {
        return requestURI;
    }

    public void setScheme(String scheme) {
        this.scheme = scheme;
    }

    public String getScheme() {
        return scheme;
    }

    public void setServerName(String serverName) {
        this.serverName = serverName;
    }

    public String getServerName() {
        return serverName;
    }

    public void setServerPort(int serverPort) {
        this.serverPort = serverPort;
    }

    public int getServerPort() {
        return serverPort;
    }

    public HttpSession getSession() {
        HttpSession session = null;

        try {
            session = super.getSession();
        } catch (AssertionFailedError e) {
            //ignore
        }

        if (session == null) {
            session = new StrutsMockHttpSession();
            setSession(session);
        }

        return session;
    }

    public void setupGetContext(String context) {
        this.context = context;
    }

    public void setupGetPathInfo(String pathInfo) {
        this.pathInfo = pathInfo;
    }

    public int getRemotePort() {
        return 0;
    }

    public String getLocalName() {
        return null;
    }

    public String getLocalAddr() {
        return null;
    }

    public int getLocalPort() {
        return 0;
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="92" tokens="467">
<file line="191" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/dispatcher/Jsr168DispatcherTest.java"/>
<file line="247" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/dispatcher/Jsr286DispatcherTest.java"/>
<codefragment>
<![CDATA[
	}

	/**
	 * Initialize the mock request (and as a result, the mock session)
	 * 
	 * @param requestParams
	 *            The request parameters
	 * @param requestAttributes
	 *            The request attributes
	 * @param sessionParams
	 *            The session attributes
	 * @param mode
	 *            The portlet mode
	 * @param state
	 *            The portlet window state
	 * @param isEvent
	 *            <code>true</code> when the request is an ActionRequest.
	 * @param locale
	 *            The locale. If <code>null</code>, the request will return
	 *            <code>Locale.getDefault()</code>
	 */
	private void initRequest(Map<String, String[]> requestParams,
			Map<String, Object> requestAttributes,
			Map<String, Object> sessionParams, PortletMode mode,
			WindowState state, boolean isEvent, Locale locale) {
		mockRequest = isEvent ? mock(ActionRequest.class)
				: mock(RenderRequest.class);
		mockSession = mock(PortletSession.class);
		mockSession.stubs().method(ANYTHING);
		mockRequest.stubs().method(ANYTHING);
		setupStub(sessionParams, mockSession, "getAttribute");
		mockSession
				.stubs()
				.method("getAttributeNames")
				.will(returnValue(Collections.enumeration(sessionParams
						.keySet())));
		setupParamStub(requestParams, mockRequest, "getParameter");
		setupStub(requestAttributes, mockRequest, "getAttribute");
		mockRequest
				.stubs()
				.method("getAttributeNames")
				.will(returnValue(Collections.enumeration(requestAttributes
						.keySet())));
		mockRequest.stubs().method("getParameterMap")
				.will(returnValue(requestParams));
		mockRequest
				.stubs()
				.method("getParameterNames")
				.will(returnValue(Collections.enumeration(requestParams
						.keySet())));
		mockRequest.stubs().method("getPortletSession")
				.will(returnValue(mockSession.proxy()));
		if (locale != null) {
			mockRequest.stubs().method("getLocale").will(returnValue(locale));
		} else {
			mockRequest.stubs().method("getLocale")
					.will(returnValue(Locale.getDefault()));
		}
		mockRequest.stubs().method("getPortletMode").will(returnValue(mode));
		mockRequest.stubs().method("getWindowState").will(returnValue(state));
	}

	private void setupParamStub(Map<String, String[]> requestParams,
			Mock mockRequest, String method) {
		Map<String, String> newMap = new HashMap<String, String>();
		for (String key : requestParams.keySet()) {
			String[] val = requestParams.get(key);
			newMap.put(key, val[0]);
		}
		setupStub(newMap, mockRequest, method);

	}

	/**
	 * Set up stubs for the mock.
	 * 
	 * @param map
	 *            The map containing the <code>key</code> and
	 *            <code>values</code>. The key is the expected parameter to
	 *            <code>method</code>, and value is the value that should be
	 *            returned from the stub.
	 * @param mock
	 *            The mock to initialize.
	 * @param method
	 *            The name of the method to stub.
	 */
	private void setupStub(Map map, Mock mock, String method) {
		for (Object key : map.keySet()) {
			Object val = map.get(key);
			mock.stubs().method(method).with(eq(key)).will(returnValue(val));
		}
	}
]]>
</codefragment>
</duplication>
<duplication lines="75" tokens="453">
<file line="31" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/util/logging/log4j2/Log4j2Logger.java"/>
<file line="31" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/util/logging/slf4j/Slf4jLogger.java"/>
<codefragment>
<![CDATA[
    public Slf4jLogger(org.slf4j.Logger log) {
        this.log = log;
    }

    public void error(String msg, String... args) {
        log.error(LoggerUtils.format(msg, args));
    }

    public void error(String msg, Object... args) {
        log.error(LoggerUtils.format(msg, args));
    }

    public void error(String msg, Throwable ex, String... args) {
        log.error(LoggerUtils.format(msg, args), ex);
    }

    public void info(String msg, String... args) {
        log.info(LoggerUtils.format(msg, args));
    }

    public void info(String msg, Throwable ex, String... args) {
        log.info(LoggerUtils.format(msg, args), ex);
    }

    public boolean isInfoEnabled() {
        return log.isInfoEnabled();
    }

    public void warn(String msg, String... args) {
        log.warn(LoggerUtils.format(msg, args));
    }

    public void warn(String msg, Object... args) {
        log.warn(LoggerUtils.format(msg, args));
    }

    public void warn(String msg, Throwable ex, String... args) {
        log.warn(LoggerUtils.format(msg, args), ex);
    }
    
    public boolean isDebugEnabled() {
        return log.isDebugEnabled();
    }
    
    public void debug(String msg, String... args) {
        log.debug(LoggerUtils.format(msg, args));
    }

    public void debug(String msg, Object... args) {
        log.debug(LoggerUtils.format(msg, args));
    }

    public void debug(String msg, Throwable ex, String... args) {
        log.debug(LoggerUtils.format(msg, args), ex);
    }
    
    public boolean isTraceEnabled() {
        return log.isTraceEnabled();
    }
    
    public void trace(String msg, String... args) {
        log.trace(LoggerUtils.format(msg, args));
    }

    public void trace(String msg, Object... args) {
        log.trace(LoggerUtils.format(msg, args));
    }

    public void trace(String msg, Throwable ex, String... args) {
        log.trace(LoggerUtils.format(msg, args), ex);
    }


    public void fatal(String msg, String... args) {
        log.error(LoggerUtils.format(msg, args));
]]>
</codefragment>
</duplication>
<duplication lines="75" tokens="451">
<file line="32" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/util/logging/commons/CommonsLogger.java"/>
<file line="31" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/util/logging/slf4j/Slf4jLogger.java"/>
<codefragment>
<![CDATA[
    public Slf4jLogger(org.slf4j.Logger log) {
        this.log = log;
    }

    public void error(String msg, String... args) {
        log.error(LoggerUtils.format(msg, args));
    }

    public void error(String msg, Object... args) {
        log.error(LoggerUtils.format(msg, args));
    }

    public void error(String msg, Throwable ex, String... args) {
        log.error(LoggerUtils.format(msg, args), ex);
    }

    public void info(String msg, String... args) {
        log.info(LoggerUtils.format(msg, args));
    }

    public void info(String msg, Throwable ex, String... args) {
        log.info(LoggerUtils.format(msg, args), ex);
    }

    public boolean isInfoEnabled() {
        return log.isInfoEnabled();
    }

    public void warn(String msg, String... args) {
        log.warn(LoggerUtils.format(msg, args));
    }

    public void warn(String msg, Object... args) {
        log.warn(LoggerUtils.format(msg, args));
    }

    public void warn(String msg, Throwable ex, String... args) {
        log.warn(LoggerUtils.format(msg, args), ex);
    }
    
    public boolean isDebugEnabled() {
        return log.isDebugEnabled();
    }
    
    public void debug(String msg, String... args) {
        log.debug(LoggerUtils.format(msg, args));
    }

    public void debug(String msg, Object... args) {
        log.debug(LoggerUtils.format(msg, args));
    }

    public void debug(String msg, Throwable ex, String... args) {
        log.debug(LoggerUtils.format(msg, args), ex);
    }
    
    public boolean isTraceEnabled() {
        return log.isTraceEnabled();
    }
    
    public void trace(String msg, String... args) {
        log.trace(LoggerUtils.format(msg, args));
    }

    public void trace(String msg, Object... args) {
        log.trace(LoggerUtils.format(msg, args));
    }

    public void trace(String msg, Throwable ex, String... args) {
        log.trace(LoggerUtils.format(msg, args), ex);
    }


    public void fatal(String msg, String... args) {
        log.error(LoggerUtils.format(msg, args));
]]>
</codefragment>
</duplication>
<duplication lines="58" tokens="443">
<file line="69" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/dispatcher/Jsr168DispatcherTest.java"/>
<file line="190" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/dispatcher/Jsr286DispatcherTest.java"/>
<codefragment>
<![CDATA[
		dispatcher = new Jsr286Dispatcher();
	}

	private void initPortletConfig(final Map<String, String> initParams,
			final Map<String, Object> attributes) {
		mockConfig = mock(PortletConfig.class);
		mockCtx = mock(PortletContext.class);
		mockConfig.stubs().method(ANYTHING);
		mockCtx.stubs().method(ANYTHING);
		setupStub(initParams, mockConfig, "getInitParameter");
		mockCtx.stubs()
				.method("getAttributeNames")
				.will(returnValue(Collections.enumeration(attributes.keySet())));
		setupStub(attributes, mockCtx, "getAttribute");
		mockConfig.stubs().method("getPortletContext")
				.will(returnValue(mockCtx.proxy()));
		mockCtx.stubs()
				.method("getInitParameterNames")
				.will(returnValue(Collections.enumeration(initParams.keySet())));
		setupStub(initParams, mockCtx, "getInitParameter");
		mockConfig
				.stubs()
				.method("getInitParameterNames")
				.will(returnValue(Collections.enumeration(initParams.keySet())));
		setupStub(initParams, mockConfig, "getInitParameter");
		mockConfig.stubs().method("getResourceBundle")
				.will(returnValue(new ListResourceBundle() {
					protected Object[][] getContents() {
						return new String[][] { { "javax.portlet.title",
								"MyTitle" } };
					}
				}));
	}

	private void setupActionFactory(String namespace, String actionName,
			String result, ValueStack stack) {
		if (mockActionFactory == null) {
			mockActionFactory = mock(ActionProxyFactory.class);
		}
		mockAction = mock(Action.class);
		mockActionProxy = mock(ActionProxy.class);
		mockInvocation = mock(ActionInvocation.class);

		mockActionFactory
				.expects(once())
				.method("createActionProxy")
				.with(new Constraint[] { eq(namespace), eq(actionName), NULL,
						isA(Map.class) })
				.will(returnValue(mockActionProxy.proxy()));
		mockActionProxy.stubs().method("getAction")
				.will(returnValue(mockAction.proxy()));
		mockActionProxy.expects(once()).method("execute")
				.will(returnValue(result));
		mockActionProxy.expects(once()).method("getInvocation")
				.will(returnValue(mockInvocation.proxy()));
		mockInvocation.stubs().method("getStack").will(returnValue(stack));

	}
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="424">
<file line="366" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<file line="405" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<codefragment>
<![CDATA[
        Map<String, ResultConfig> results = builder.build(InheritedResultsExtends.class, null, "class-level-results", packageConfig);
        assertEquals(4, results.size());
        assertEquals("error", results.get("error").getName());
        assertEquals("input", results.get("input").getName());
        assertEquals("success", results.get("success").getName());
        assertEquals("failure", results.get("failure").getName());
        assertEquals(3, results.get("error").getParams().size());
        assertEquals("org.apache.struts2.result.ServletDispatcherResult", results.get("error").getClassName());
        assertEquals("/WEB-INF/location/namespace/error.jsp", results.get("error").getParams().get("location"));
        assertEquals("ann-value", results.get("error").getParams().get("key"));
        assertEquals("ann-value1", results.get("error").getParams().get("key1"));
        assertEquals(1, results.get("input").getParams().size());
        assertEquals("foo.action", results.get("input").getParams().get("actionName"));
        assertEquals("org.apache.struts2.result.ServletActionRedirectResult", results.get("input").getClassName());
        assertEquals(3, results.get("failure").getParams().size());
        assertEquals("/WEB-INF/location/namespace/action-failure.jsp", results.get("failure").getParams().get("location"));
        assertEquals("org.apache.struts2.result.ServletDispatcherResult", results.get("failure").getClassName());
        assertEquals("value", results.get("failure").getParams().get("key"));
        assertEquals("value1", results.get("failure").getParams().get("key1"));
        assertEquals(3, results.get("success").getParams().size());
        assertEquals("/WEB-INF/location/namespace/action-success.jsp", results.get("success").getParams().get("location"));
        assertEquals("org.apache.struts2.result.ServletDispatcherResult", results.get("success").getClassName());
        assertEquals("value", results.get("success").getParams().get("key"));
        assertEquals("value1", results.get("success").getParams().get("key1"));
        EasyMock.verify(context);
    }

    public void testActionLevelSingleResultAnnotation() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="101" tokens="377">
<file line="60" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/freemarker/tags/TagModelTest.java"/>
<file line="193" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/freemarker/tags/TagModelTest.java"/>
<codefragment>
<![CDATA[
        MockHttpServletResponse response = new MockHttpServletResponse();

        Map params = new LinkedHashMap();

        // Try to test out the commons Freemarker's Template Model

        // TemplateBooleanModel
        params.put("property1", new TemplateBooleanModel() {
            public boolean getAsBoolean() throws TemplateModelException {
                return true;
            }
        });
        params.put("property2", new TemplateBooleanModel() {
            public boolean getAsBoolean() throws TemplateModelException {
                return false;
            }
        });

        // TemplateScalarModel
        params.put("property3", new TemplateScalarModel() {
            public String getAsString() throws TemplateModelException {
                return "toby";
            }
        });
        params.put("property4", new TemplateScalarModel() {
            public String getAsString() throws TemplateModelException {
                return "phil";
            }
        });

        // TemplateNumberModel
        params.put("property5", new TemplateNumberModel() {
            public Number getAsNumber() throws TemplateModelException {
                return new Integer("10");
            }
        });
        params.put("property6", new TemplateNumberModel() {
            public Number getAsNumber() throws TemplateModelException {
                return new Float("1.1");
            }
        });

        // TemplateHashModel
        params.put("property7", new TemplateHashModel() {
            public TemplateModel get(String arg0) throws TemplateModelException {
                return null;
            }

            public boolean isEmpty() throws TemplateModelException {
                return true;
            }
        });

        // TemplateSequenceModel
        params.put("property8", new TemplateSequenceModel() {
            public TemplateModel get(int arg0) throws TemplateModelException {
                return null;
            }

            public int size() throws TemplateModelException {
                return 0;
            }
        });

        // TemplateCollectionModel
        params.put("property9", new TemplateCollectionModel() {
            public TemplateModelIterator iterator() throws TemplateModelException {
                return new TemplateModelIterator() {
                    private Iterator i;
                    {
                        i = Collections.EMPTY_LIST.iterator();
                    }

                    public boolean hasNext() throws TemplateModelException {
                        return i.hasNext();
                    }

                    public TemplateModel next() throws TemplateModelException {
                        return (TemplateModel) i.next();
                    }
                };
            }
        });

        // AdapterTemplateModel
        params.put("property10", new AdapterTemplateModel() {
            public Object getAdaptedObject(Class arg0) {
                return ADAPTER_TEMPLATE_MODEL_CONTAINED_OBJECT;
            }
        });

        // WrapperTemplateModel
        params.put("property11", new WrapperTemplateModel() {
            public Object getWrappedObject() {
                return WRAPPING_TEMPLATE_MODEL_CONTAINED_OBJECT;
            }
        });

        TagModel tagModel = new TagModel(stack, request, response) {
            protected Component getBean() {
                return bean;
]]>
</codefragment>
</duplication>
<duplication lines="42" tokens="361">
<file line="52" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/config/providers/XmlConfigurationProviderAllowedMethodsTest.java"/>
<file line="117" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/config/providers/XmlConfigurationProviderAllowedMethodsTest.java"/>
<codefragment>
<![CDATA[
        assertFalse(action.isAllowedMethod("xyz"));

        action = (ActionConfig) actionConfigs.get("Boring");
        assertEquals(2, action.getAllowedMethods().size());
        assertTrue(action.isAllowedMethod("execute"));
        assertTrue(action.isAllowedMethod("input"));
        assertTrue(action.isAllowedMethod("cancel"));
        assertFalse(action.isAllowedMethod("foo"));
        assertFalse(action.isAllowedMethod("bar"));
        assertFalse(action.isAllowedMethod("baz"));
        assertFalse(action.isAllowedMethod("xyz"));

        action = (ActionConfig) actionConfigs.get("Foo");
        assertEquals(3, action.getAllowedMethods().size());
        assertTrue(action.isAllowedMethod("execute"));
        assertTrue(action.isAllowedMethod("input"));
        assertTrue(action.isAllowedMethod("cancel"));
        assertTrue(action.isAllowedMethod("foo"));
        assertFalse(action.isAllowedMethod("bar"));
        assertFalse(action.isAllowedMethod("baz"));
        assertFalse(action.isAllowedMethod("xyz"));

        action = (ActionConfig) actionConfigs.get("Bar");
        assertEquals(4, action.getAllowedMethods().size());
        assertTrue(action.isAllowedMethod("execute"));
        assertTrue(action.isAllowedMethod("input"));
        assertTrue(action.isAllowedMethod("cancel"));
        assertTrue(action.isAllowedMethod("foo"));
        assertTrue(action.isAllowedMethod("bar"));
        assertFalse(action.isAllowedMethod("baz"));
        assertFalse(action.isAllowedMethod("xyz"));

        action = (ActionConfig) actionConfigs.get("Baz");
        assertEquals(5, action.getAllowedMethods().size());
        assertFalse(action.isAllowedMethod("execute"));
        assertTrue(action.isAllowedMethod("input"));
        assertTrue(action.isAllowedMethod("cancel"));
        assertTrue(action.isAllowedMethod("foo"));
        assertTrue(action.isAllowedMethod("bar"));
        assertTrue(action.isAllowedMethod("baz"));
        assertFalse(action.isAllowedMethod("xyz"));
    }
]]>
</codefragment>
</duplication>
<duplication lines="62" tokens="359">
<file line="104" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/validator/AnnotationActionValidatorManager.java"/>
<file line="107" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/validator/DefaultActionValidatorManager.java"/>
<codefragment>
<![CDATA[
                Validator validator = validatorFactory.getValidator(cfg);
                validator.setValidatorType(cfg.getType());
                validator.setValueStack(stack);
                validators.add(validator);
            }
        }
        return validators;
    }

    public void validate(Object object, String context) throws ValidationException {
        validate(object, context, (String) null);
    }

    public void validate(Object object, String context, String method) throws ValidationException {
        ValidatorContext validatorContext = new DelegatingValidatorContext(object);
        validate(object, context, validatorContext, method);
    }

    public void validate(Object object, String context, ValidatorContext validatorContext) throws ValidationException {
        validate(object, context, validatorContext, null);
    }

    public void validate(Object object, String context, ValidatorContext validatorContext, String method) throws ValidationException {
        List<Validator> validators = getValidators(object.getClass(), context, method);
        Set<String> shortcircuitedFields = null;

        for (final Validator validator : validators) {
            try {
                validator.setValidatorContext(validatorContext);

                LOG.debug("Running validator: {} for object {} and method {}", validator, object, method);

                FieldValidator fValidator = null;
                String fullFieldName = null;

                if (validator instanceof FieldValidator) {
                    fValidator = (FieldValidator) validator;
                    fullFieldName = fValidator.getValidatorContext().getFullFieldName(fValidator.getFieldName());

                    if ((shortcircuitedFields != null) && shortcircuitedFields.contains(fullFieldName)) {
                        LOG.debug("Short-circuited, skipping");
                        continue;
                    }
                }

                if (validator instanceof ShortCircuitableValidator && ((ShortCircuitableValidator) validator).isShortCircuit()) {
                    // get number of existing errors
                    List<String> errs = null;

                    if (fValidator != null) {
                        if (validatorContext.hasFieldErrors()) {
                            Collection<String> fieldErrors = validatorContext.getFieldErrors().get(fullFieldName);

                            if (fieldErrors != null) {
                                errs = new ArrayList<>(fieldErrors);
                            }
                        }
                    } else if (validatorContext.hasActionErrors()) {
                        Collection<String> actionErrors = validatorContext.getActionErrors();

                        if (actionErrors != null) {
                            errs = new ArrayList<String>(actionErrors);
]]>
</codefragment>
</duplication>
<duplication lines="72" tokens="346">
<file line="190" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/components/Anchor.java"/>
<file line="155" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/components/URL.java"/>
<codefragment>
<![CDATA[
    }

    @StrutsTagAttribute(description="The includeParams attribute may have the value 'none', 'get' or 'all'", defaultValue="none")
    public void setIncludeParams(String includeParams) {
        urlProvider.setIncludeParams(includeParams);
    }

    @StrutsTagAttribute(description="Set scheme attribute")
    public void setScheme(String scheme) {
        urlProvider.setScheme(scheme);
    }

    @StrutsTagAttribute(description="The target value to use, if not using action")
    public void setValue(String value) {
        urlProvider.setValue(value);
    }

    @StrutsTagAttribute(description="The action to generate the URL for, if not using value")
    public void setAction(String action) {
        urlProvider.setAction(action);
    }

    @StrutsTagAttribute(description="The namespace to use")
    public void setNamespace(String namespace) {
        urlProvider.setNamespace(namespace);
    }

    @StrutsTagAttribute(description="The method of action to use")
    public void setMethod(String method) {
        urlProvider.setMethod(method);
    }

    @StrutsTagAttribute(description="Whether to encode parameters", type="Boolean", defaultValue="true")
    public void setEncode(boolean encode) {
        urlProvider.setEncode(encode);
    }

    @StrutsTagAttribute(description="Whether actual context should be included in URL", type="Boolean", defaultValue="true")
    public void setIncludeContext(boolean includeContext) {
        urlProvider.setIncludeContext(includeContext);
    }

    @StrutsTagAttribute(description="The resulting portlet mode")
    public void setPortletMode(String portletMode) {
        urlProvider.setPortletMode(portletMode);
    }

    @StrutsTagAttribute(description="The resulting portlet window state")
    public void setWindowState(String windowState) {
        urlProvider.setWindowState(windowState);
    }

    @StrutsTagAttribute(description="Specifies if this should be a portlet render or action URL. Default is \"render\". To create an action URL, use \"action\".")
    public void setPortletUrlType(String portletUrlType) {
       urlProvider.setPortletUrlType(portletUrlType);
    }

    @StrutsTagAttribute(description="The anchor for this URL")
    public void setAnchor(String anchor) {
        urlProvider.setAnchor(anchor);
    }

    @StrutsTagAttribute(description="Specifies whether to escape ampersand (&amp;) to (&amp;amp;) or not", type="Boolean", defaultValue="true")
    public void setEscapeAmp(boolean escapeAmp) {
        urlProvider.setEscapeAmp(escapeAmp);
    }

    @StrutsTagAttribute(description="Specifies whether to force the addition of scheme, host and port or not", type="Boolean", defaultValue="false")
    public void setForceAddSchemeHostAndPort(boolean forceAddSchemeHostAndPort) {
        urlProvider.setForceAddSchemeHostAndPort(forceAddSchemeHostAndPort);
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="64" tokens="295">
<file line="98" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java"/>
<file line="238" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java"/>
<codefragment>
<![CDATA[
    public void testWithoutHeaderOnOneSide() throws Exception {
        List left = new ArrayList();
        left.add("Left2");

        List right = new ArrayList();
        right.add("Right2");

        List leftVal = new ArrayList();
        leftVal.add("Left1");
        leftVal.add("Left2");
        leftVal.add("Left3");

        List rightVal = new ArrayList();
        rightVal.add("Right1");
        rightVal.add("Right2");
        rightVal.add("Right3");


        TestAction testaction = (TestAction) action;
        testaction.setCollection(left);
        testaction.setList2(right);
        testaction.setCollection2(leftVal);
        testaction.setList3(rightVal);


        OptionTransferSelectTag tag = new OptionTransferSelectTag();
        tag.setPageContext(pageContext);

        tag.setName("collection");
        tag.setId("id");
        tag.setList("collection2");
        tag.setSize("20");
        tag.setMultiple("true");
        tag.setEmptyOption("true");

        tag.setDoubleName("list2");
        tag.setDoubleList("list3");
        tag.setDoubleId("doubleId");
        tag.setDoubleSize("20");
        tag.setMultiple("true");
        tag.setDoubleEmptyOption("true");

        tag.setAllowAddAllToLeft("true");
        tag.setAllowAddAllToRight("true");
        tag.setAllowAddToLeft("true");
        tag.setAllowAddToRight("true");
        tag.setAllowSelectAll("true");

        tag.setAddAllToLeftLabel("All Left");
        tag.setAddAllToRightLabel("All Right");
        tag.setAddToLeftLabel("Left");
        tag.setAddToRightLabel("Right");
        tag.setSelectAllLabel("Select All");

        tag.setLeftTitle("Title Left");
        tag.setRightTitle("Title Right");

        tag.setButtonCssClass("buttonCssClass");
        tag.setButtonCssStyle("buttonCssStyle");

        tag.setHeaderKey("Header Key");
        tag.setHeaderValue("Header Value");

        tag.doStartTag();
]]>
</codefragment>
</duplication>
<duplication lines="87" tokens="286">
<file line="72" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/StrutsMockServletContext.java"/>
<file line="77" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/StrutsMockServletContext.java"/>
<codefragment>
<![CDATA[
    public int getEffectiveMinorVersion() {
        return 0;
    }

    public String getMimeType(String s) {
        return null;
    }

    public Set getResourcePaths(String s) {
        return null;
    }

    public URL getResource(String s) throws MalformedURLException {
        return null;
    }

    public InputStream getResourceAsStream(String s) {
        if (resourceAsStream != null) {
            return resourceAsStream;
        }
        return null;
    }

    public void setResourceAsStream(InputStream is) {
        this.resourceAsStream = is;
    }

    public RequestDispatcher getRequestDispatcher(String s) {
        return null;
    }

    public RequestDispatcher getNamedDispatcher(String s) {
        return null;
    }

    public Servlet getServlet(String s) throws ServletException {
        return null;
    }

    public Enumeration getServlets() {
        return null;
    }

    public Enumeration getServletNames() {
        return null;
    }

    public void log(String s) {
    }

    public void log(Exception e, String s) {
    }

    public void log(String s, Throwable throwable) {
    }

    public String getServerInfo() {
        return servletInfo;
    }

    public String getInitParameter(String s) {
        return (String) initParams.get(s);
    }

    public Enumeration getInitParameterNames() {
        return Collections.enumeration(initParams.keySet());
    }

    public Object getAttribute(String s) {
        return attributes.get(s);
    }

    public Enumeration getAttributeNames() {
        return Collections.enumeration(attributes.keySet());
    }

    public void setAttribute(String s, Object o) {
        attributes.put(s, o);
    }

    public void removeAttribute(String s) {
        attributes.remove(s);
    }

    public String getServletContextName() {
        return null;
    }
]]>
</codefragment>
</duplication>
<duplication lines="61" tokens="283">
<file line="98" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java"/>
<file line="171" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java"/>
<codefragment>
<![CDATA[
    public void testWithoutHeaderOnBothSides() throws Exception {
        List left = new ArrayList();
        left.add("Left2");

        List right = new ArrayList();
        right.add("Right2");

        List leftVal = new ArrayList();
        leftVal.add("Left1");
        leftVal.add("Left2");
        leftVal.add("Left3");

        List rightVal = new ArrayList();
        rightVal.add("Right1");
        rightVal.add("Right2");
        rightVal.add("Right3");


        TestAction testaction = (TestAction) action;
        testaction.setCollection(left);
        testaction.setList2(right);
        testaction.setCollection2(leftVal);
        testaction.setList3(rightVal);


        OptionTransferSelectTag tag = new OptionTransferSelectTag();
        tag.setPageContext(pageContext);

        tag.setName("collection");
        tag.setId("id");
        tag.setList("collection2");
        tag.setSize("20");
        tag.setMultiple("true");
        tag.setEmptyOption("true");

        tag.setDoubleName("list2");
        tag.setDoubleList("list3");
        tag.setDoubleId("doubleId");
        tag.setDoubleSize("20");
        tag.setMultiple("true");
        tag.setDoubleEmptyOption("true");

        tag.setAllowAddAllToLeft("true");
        tag.setAllowAddAllToRight("true");
        tag.setAllowAddToLeft("true");
        tag.setAllowAddToRight("true");
        tag.setAllowSelectAll("true");

        tag.setAddAllToLeftLabel("All Left");
        tag.setAddAllToRightLabel("All Right");
        tag.setAddToLeftLabel("Left");
        tag.setAddToRightLabel("Right");
        tag.setSelectAllLabel("Select All");

        tag.setLeftTitle("Title Left");
        tag.setRightTitle("Title Right");

        tag.setButtonCssClass("buttonCssClass");
        tag.setButtonCssStyle("buttonCssStyle");

        tag.doStartTag();
]]>
</codefragment>
</duplication>
<duplication lines="51" tokens="280">
<file line="37" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/DoubleSelectTest.java"/>
<file line="100" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/DoubleSelectTest.java"/>
<codefragment>
<![CDATA[
    public void testOnchange() throws Exception {
        TestAction testAction = (TestAction) action;

        Region antwerp = new Region("Antwerp", "AN");
        Region gent = new Region("Gent", "GN");
        Region brugge = new Region("Brugge", "BRG");
        ArrayList belgiumRegions = new ArrayList();
        belgiumRegions.add(antwerp);
        belgiumRegions.add(gent);
        belgiumRegions.add(brugge);
        Country belgium = new Country("Belgium", "BE", belgiumRegions);

        Region paris = new Region("Paris", "PA");
        Region bordeaux = new Region("Bordeaux", "BOR");
        ArrayList franceRegions = new ArrayList();
        franceRegions.add(paris);
        franceRegions.add(bordeaux);
        Country france = new Country("France", "FR", franceRegions);

        Collection collection = new ArrayList(2);
        collection.add("AN");
        testAction.setCollection(collection);

        List countries = new ArrayList();
        countries.add(belgium);
        countries.add(france);

        testAction.setList2(countries);

        DoubleSelectTag tag = new DoubleSelectTag();
        tag.setPageContext(pageContext);
        tag.setLabel("mylabel");
        tag.setName("foo");
        tag.setDoubleName("region");

        tag.setList("list2");
        tag.setDoubleList("regions");

        tag.setListKey("iso");
        tag.setDoubleListKey("key");
        tag.setListValue("name");
        tag.setDoubleListValue("name");

        tag.setFormName("inputForm");

        tag.setOnmousedown("window.status='onmousedown';");
        tag.setOnmousemove("window.status='onmousemove';");
        tag.setOnmouseout("window.status='onmouseout';");
        tag.setOnmouseover("window.status='onmouseover';");
        tag.setOnmouseup("window.status='onmouseup';");
        tag.setOnchange("window.status='onchange';");
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="276">
<file line="71" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/config/providers/XmlConfigurationProviderInterceptorParamOverridingTest.java"/>
<file line="60" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/config/providers/XmlConfigurationProviderInterceptorStackParamOverridingTest.java"/>
<codefragment>
<![CDATA[
    	InterceptorMapping actionTwoInterceptorMapping3 = (InterceptorMapping) actionTwoInterceptors.get(2);

    	assertNotNull(actionOneInterceptorMapping1);
    	assertNotNull(actionOneInterceptorMapping2);
    	assertNotNull(actionOneInterceptorMapping3);
    	assertNotNull(actionTwoInterceptorMapping1);
    	assertNotNull(actionTwoInterceptorMapping2);
    	assertNotNull(actionTwoInterceptorMapping3);


    	assertEquals(((InterceptorForTestPurpose)actionOneInterceptorMapping1.getInterceptor()).getParamOne(), "i1p1");
		assertEquals(((InterceptorForTestPurpose)actionOneInterceptorMapping1.getInterceptor()).getParamTwo(), "i1p2");
		assertEquals(((InterceptorForTestPurpose)actionOneInterceptorMapping2.getInterceptor()).getParamOne(), "i2p1");
		assertEquals(((InterceptorForTestPurpose)actionOneInterceptorMapping2.getInterceptor()).getParamTwo(), null);
		assertEquals(((InterceptorForTestPurpose)actionOneInterceptorMapping3.getInterceptor()).getParamOne(), null);
		assertEquals(((InterceptorForTestPurpose)actionOneInterceptorMapping3.getInterceptor()).getParamTwo(), null);

    	assertEquals(((InterceptorForTestPurpose)actionTwoInterceptorMapping1.getInterceptor()).getParamOne(), null);
		assertEquals(((InterceptorForTestPurpose)actionTwoInterceptorMapping1.getInterceptor()).getParamTwo(), null);
		assertEquals(((InterceptorForTestPurpose)actionTwoInterceptorMapping2.getInterceptor()).getParamOne(), null);
		assertEquals(((InterceptorForTestPurpose)actionTwoInterceptorMapping2.getInterceptor()).getParamTwo(), "i2p2");
		assertEquals(((InterceptorForTestPurpose)actionTwoInterceptorMapping3.getInterceptor()).getParamOne(), "i3p1");
		assertEquals(((InterceptorForTestPurpose)actionTwoInterceptorMapping3.getInterceptor()).getParamTwo(), "i3p2");

    }

    @Override
    protected void tearDown() throws Exception {
    	configurationManager.clearContainerProviders();
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="267">
<file line="63" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/config/providers/InterceptorBuilderTest.java"/>
<file line="165" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/config/providers/InterceptorBuilderTest.java"/>
<codefragment>
<![CDATA[
                        put("interceptorStack3.interceptor2.param2", "interceptor2_value2");
                    }
                }, null, objectFactory);

        assertEquals(interceptorMappings.size(), 2);

        assertEquals(((InterceptorMapping) interceptorMappings.get(0)).getName(), "interceptor1");
        assertNotNull(((InterceptorMapping) interceptorMappings.get(0)).getInterceptor());
        assertEquals(((InterceptorMapping) interceptorMappings.get(0)).getInterceptor().getClass(), MockInterceptor1.class);
        assertEquals(((MockInterceptor1) ((InterceptorMapping) interceptorMappings.get(0)).getInterceptor()).getParam1(), "interceptor1_value1");
        assertEquals(((MockInterceptor1) ((InterceptorMapping) interceptorMappings.get(0)).getInterceptor()).getParam2(), "interceptor1_value2");

        assertEquals(((InterceptorMapping) interceptorMappings.get(1)).getName(), "interceptor2");
        assertNotNull(((InterceptorMapping) interceptorMappings.get(1)).getInterceptor());
        assertEquals(((InterceptorMapping) interceptorMappings.get(1)).getInterceptor().getClass(), MockInterceptor2.class);
        assertEquals(((MockInterceptor2) ((InterceptorMapping) interceptorMappings.get(1)).getInterceptor()).getParam1(), "interceptor2_value1");
        assertEquals(((MockInterceptor2) ((InterceptorMapping) interceptorMappings.get(1)).getInterceptor()).getParam2(), "interceptor2_value2");
    }

    /**
     * Try to test this
     * <interceptor-ref name="interceptorStack1">
     * <param name="interceptorStack2.interceptorStack3.interceptorStack4.interceptor1.param1">interceptor1_value1</param>
     * <param name="interceptorStack2.interceptorStack3.interceptorStack4.interceptor1.param2">interceptor1_value2</param>
     * <param name="interceptorStack5.interceptor2.param1">interceptor2_value1</param>
     * <param name="interceptorStack5.interceptor2.param2">interceptor2_value2</param>
     * </interceptor-ref>
     *
     * @throws Exception
     */
    public void testBuildInterceptor_3() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="266">
<file line="63" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/config/providers/InterceptorBuilderTest.java"/>
<file line="236" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/config/providers/InterceptorBuilderTest.java"/>
<codefragment>
<![CDATA[
                        put("interceptorStack5.interceptor2.param2", "interceptor2_value2");
                    }
                }, null, objectFactory);

        assertEquals(interceptorMappings.size(), 2);

        assertEquals(((InterceptorMapping) interceptorMappings.get(0)).getName(), "interceptor1");
        assertNotNull(((InterceptorMapping) interceptorMappings.get(0)).getInterceptor());
        assertEquals(((InterceptorMapping) interceptorMappings.get(0)).getInterceptor().getClass(), MockInterceptor1.class);
        assertEquals(((MockInterceptor1) ((InterceptorMapping) interceptorMappings.get(0)).getInterceptor()).getParam1(), "interceptor1_value1");
        assertEquals(((MockInterceptor1) ((InterceptorMapping) interceptorMappings.get(0)).getInterceptor()).getParam2(), "interceptor1_value2");

        assertEquals(((InterceptorMapping) interceptorMappings.get(1)).getName(), "interceptor2");
        assertNotNull(((InterceptorMapping) interceptorMappings.get(1)).getInterceptor());
        assertEquals(((InterceptorMapping) interceptorMappings.get(1)).getInterceptor().getClass(), MockInterceptor2.class);
        assertEquals(((MockInterceptor2) ((InterceptorMapping) interceptorMappings.get(1)).getInterceptor()).getParam1(), "interceptor2_value1");
        assertEquals(((MockInterceptor2) ((InterceptorMapping) interceptorMappings.get(1)).getInterceptor()).getParam2(), "interceptor2_value2");
    }


    public static class MockInterceptor1 implements Interceptor {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="264">
<file line="77" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/freemarker/FreemarkerResultMockedTest.java"/>
<file line="129" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/freemarker/FreemarkerResultMockedTest.java"/>
<codefragment>
<![CDATA[
        EasyMock.expect(servletContext.getRealPath("/template/simple/radiomap.ftl")).andReturn(file.getAbsolutePath());

        file = new File(ClassLoaderUtil.getResource("template/simple/css.ftl", getClass()).toURI());
        EasyMock.expect(servletContext.getRealPath("/template/simple/css.ftl")).andReturn(file.getAbsolutePath());
        EasyMock.expect(servletContext.getRealPath("/template/~~~simple/css.ftl")).andReturn(file.getAbsolutePath());

        file = new File(ClassLoaderUtil.getResource("template/simple/scripting-events.ftl", getClass()).toURI());
        EasyMock.expect(servletContext.getRealPath("/template/simple/scripting-events.ftl")).andReturn(file.getAbsolutePath());
        EasyMock.expect(servletContext.getRealPath("/template/~~~simple/scripting-events.ftl")).andReturn(file.getAbsolutePath());

        file = new File(ClassLoaderUtil.getResource("template/simple/common-attributes.ftl", getClass()).toURI());
        EasyMock.expect(servletContext.getRealPath("/template/simple/common-attributes.ftl")).andReturn(file.getAbsolutePath());
        EasyMock.expect(servletContext.getRealPath("/template/~~~simple/common-attributes.ftl")).andReturn(file.getAbsolutePath());

        file = new File(ClassLoaderUtil.getResource("template/simple/dynamic-attributes.ftl", getClass()).toURI());
        EasyMock.expect(servletContext.getRealPath("/template/simple/dynamic-attributes.ftl")).andReturn(file.getAbsolutePath());
        EasyMock.expect(servletContext.getRealPath("/template/~~~simple/dynamic-attributes.ftl")).andReturn(file.getAbsolutePath());

        EasyMock.replay(servletContext);

        init();

        request.setRequestURI("/tutorial/test7.action");
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="262">
<file line="73" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/AnnotationXWorkConverterTest.java"/>
<file line="78" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
    public void testArrayToNumberConversion() {
        String[] value = new String[]{"12345"};
        assertEquals(new Integer(12345), converter.convertValue(context, null, null, null, value, Integer.class));
        assertEquals(new Long(12345), converter.convertValue(context, null, null, null, value, Long.class));
        value[0] = "123.45";
        assertEquals(new Float(123.45), converter.convertValue(context, null, null, null, value, Float.class));
        assertEquals(new Double(123.45), converter.convertValue(context, null, null, null, value, Double.class));
        value[0] = "1234567890123456789012345678901234567890";
        assertEquals(new BigInteger(value[0]), converter.convertValue(context, null, null, null, value, BigInteger.class));
        value[0] = "1234567890123456789.012345678901234567890";
        assertEquals(new BigDecimal(value[0]), converter.convertValue(context, null, null, null, value, BigDecimal.class));
    }

    public void testDateConversion() throws ParseException {
        java.sql.Date sqlDate = new java.sql.Date(System.currentTimeMillis());
        assertEquals(sqlDate, converter.convertValue(context, null, null, null, sqlDate, Date.class));

        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss");
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="248">
<file line="322" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/AnnotationXWorkConverterTest.java"/>
<file line="416" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        Bar bar = (Bar) converter.convertValue(null, null, null, null, "blah:123", Bar.class);
        assertNotNull("conversion failed", bar);
        assertEquals(123, bar.getSomethingElse());
        assertEquals("blah", bar.getTitle());
    }

    public void testStringToPrimitiveWrappers() {
        assertEquals(new Long(123), converter.convertValue(context, null, null, null, "123", Long.class));
        assertEquals(new Integer(123), converter.convertValue(context, null, null, null, "123", Integer.class));
        assertEquals(new Double(123.5), converter.convertValue(context, null, null, null, "123.5", Double.class));
        assertEquals(new Float(123.5), converter.convertValue(context, null, null, null, "123.5", float.class));
        assertEquals(false, converter.convertValue(context, null, null, null, "false", Boolean.class));
        assertEquals(true, converter.convertValue(context, null, null, null, "true", Boolean.class));
    }

    public void testStringToPrimitives() {
        assertEquals(new Long(123), converter.convertValue(context, null, null, null, "123", long.class));
        assertEquals(new Double(123.5), converter.convertValue(context, null, null, null, "123.5", double.class));
]]>
</codefragment>
</duplication>
<duplication lines="45" tokens="248">
<file line="339" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/validator/AnnotationActionValidatorManager.java"/>
<file line="295" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/validator/DefaultActionValidatorManager.java"/>
<codefragment>
<![CDATA[
        for (Class anInterface1 : clazz.getInterfaces()) {
            if (checked.contains(anInterface1.getName())) {
                continue;
            }

            validatorConfigs.addAll(buildClassValidatorConfigs(anInterface1, checkFile));

            if (context != null) {
                validatorConfigs.addAll(buildAliasValidatorConfigs(anInterface1, context, checkFile));
            }

            checked.add(anInterface1.getName());
        }

        validatorConfigs.addAll(buildClassValidatorConfigs(clazz, checkFile));

        if (context != null) {
            validatorConfigs.addAll(buildAliasValidatorConfigs(clazz, context, checkFile));
        }

        checked.add(clazz.getName());

        return validatorConfigs;
    }

    private List<ValidatorConfig> loadFile(String fileName, Class clazz, boolean checkFile) {
        List<ValidatorConfig> retList = Collections.emptyList();
        URL fileUrl = ClassLoaderUtil.getResource(fileName, clazz);
        if ((checkFile && fileManager.fileNeedsReloading(fileUrl)) || !validatorFileCache.containsKey(fileName)) {
            try (InputStream is = fileManager.loadFile(fileUrl)) {
                if (is != null) {
                    retList = new ArrayList<>(validatorFileParser.parseActionValidatorConfigs(validatorFactory, is, fileName));
                }
            } catch (IOException e) {
                LOG.error("Caught exception while loading file {}", fileName, e);
            }

            validatorFileCache.put(fileName, retList);
        } else {
            retList = validatorFileCache.get(fileName);
        }

        return retList;
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="243">
<file line="61" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/junit/src/main/java/org/apache/struts2/StrutsJUnit4TestCase.java"/>
<file line="61" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/junit/src/main/java/org/apache/struts2/StrutsTestCase.java"/>
<codefragment>
<![CDATA[
public abstract class StrutsTestCase extends XWorkTestCase {
    protected MockHttpServletResponse response;
    protected MockHttpServletRequest request;
    protected MockPageContext pageContext;
    protected MockServletContext servletContext;
    protected Map<String, String> dispatcherInitParams;
    protected Dispatcher dispatcher;

    protected DefaultResourceLoader resourceLoader = new DefaultResourceLoader();

    static {
        ConsoleHandler handler = new ConsoleHandler();
        final SimpleDateFormat df = new SimpleDateFormat("mm:ss.SSS");
        Formatter formatter = new Formatter() {
            @Override
            public String format(LogRecord record) {
                StringBuilder sb = new StringBuilder();
                sb.append(record.getLevel());
                sb.append(':');
                for (int x = 9 - record.getLevel().toString().length(); x > 0; x--) {
                    sb.append(' ');
                }
                sb.append('[');
                sb.append(df.format(new Date(record.getMillis())));
                sb.append("] ");
                sb.append(formatMessage(record));
                sb.append('\n');
                return sb.toString();
            }
        };
        handler.setFormatter(formatter);
        Logger logger = Logger.getLogger("");
        if (logger.getHandlers().length > 0)
            logger.removeHandler(logger.getHandlers()[0]);
        logger.addHandler(handler);
        logger.setLevel(Level.WARNING);
        LoggerFactory.setLoggerFactory(new JdkLoggerFactory());
    }
]]>
</codefragment>
</duplication>
<duplication lines="76" tokens="232">
<file line="36" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/StrutsMockHttpServletResponse.java"/>
<file line="15" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/StrutsMockHttpServletResponse.java"/>
<codefragment>
<![CDATA[
public class StrutsMockHttpServletResponse extends MockHttpServletResponse {
    private Locale locale;
    private PrintWriter writer;
    private int status;
    private String redirectURL;
    private String contentType;
    private String encoding;

    public Locale getLocale() {
        return locale;
    }

    public void setLocale(Locale locale) {
        this.locale = locale;
    }

    public String getContentType() {
        return contentType;  //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public void setContentType(String type) {
        this.contentType = type;
    }

    public PrintWriter getWriter() throws IOException {
        if (writer == null)
            return new PrintWriter(new ByteArrayOutputStream());
        else
            return writer;
    }

    public void setCharacterEncoding(String string) {
        this.encoding = string;
    }

    public void setWriter(PrintWriter writer) {
        this.writer = writer;
    }

    public String encodeURL(String s) {
        return s;
    }

    public String encodeRedirectURL(String s) {
        return s;
    }

    public String encodeUrl(String s) {
        return s;
    }

    public void setStatus(int i) {
        this.status = i;
        super.setStatus(i);
    }

    public int getStatus() {
        return status;
    }


    public String getRedirectURL() {
        return redirectURL;
    }

    public void sendRedirect(String redirectURL) throws IOException {
        this.redirectURL = redirectURL;
        super.sendRedirect(redirectURL);
    }

    @Override
    public String getCharacterEncoding() {
        return encoding;
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="40" tokens="229">
<file line="54" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/MergeIteratorTagTest.java"/>
<file line="106" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/MergeIteratorTagTest.java"/>
<codefragment>
<![CDATA[
        iterator3ParamTag.setValue("myList3");


        tag.doStartTag();
        iterator1ParamTag.doStartTag();
        iterator1ParamTag.doEndTag();
        iterator2ParamTag.doStartTag();
        iterator2ParamTag.doEndTag();
        iterator3ParamTag.doStartTag();
        iterator3ParamTag.doEndTag();
        tag.doEndTag();

        Iterator mergedIterator = (Iterator) stack.findValue("#myMergedIterator"); // if not iterator, let CCE surface

        assertNotNull(mergedIterator);
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "1");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "a");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "A");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "2");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "b");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "B");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "3");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "c");
        assertTrue(mergedIterator.hasNext());
        assertEquals(mergedIterator.next(), "C");
        assertFalse(mergedIterator.hasNext());
    }




    public Action getAction() {
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="229">
<file line="54" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/AppendIteratorTagTest.java"/>
<file line="105" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/AppendIteratorTagTest.java"/>
<codefragment>
<![CDATA[
        iterator3ParamTag.setValue("%{myList3}");


        tag.doStartTag();
        iterator1ParamTag.doStartTag();
        iterator1ParamTag.doEndTag();
        iterator2ParamTag.doStartTag();
        iterator2ParamTag.doEndTag();
        iterator3ParamTag.doStartTag();
        iterator3ParamTag.doEndTag();
        tag.doEndTag();

        Iterator appendedIterator = (Iterator) stack.findValue("#myAppendedIterator");

        assertNotNull(appendedIterator);
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "1");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "2");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "3");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "a");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "b");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "c");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "A");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "B");
        assertTrue(appendedIterator.hasNext());
        assertEquals(appendedIterator.next(), "C");
        assertFalse(appendedIterator.hasNext());
    }



    public Action getAction() {
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="218">
<file line="203" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/tagplugins/jstl/core/Import.java"/>
<file line="334" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/tagplugins/jstl/core/Import.java"/>
<codefragment>
<![CDATA[
                ctxt.generateJavaSource("        throw new JspTagException(\"Unable to get RequestDispatcher for URL: \\\" \" +" + urlName + "+ \" \\\". Verify values and/or enable cross context access.\");");
            }
            ctxt.generateJavaSource("    }");
            
            //get the request dispatcher
            ctxt.generateJavaSource("    RequestDispatcher " + requestDispatcherName + " = " + servletContextName + ".getRequestDispatcher(org.apache.struts2.jasper.tagplugins.jstl.Util.stripSession("+urlName+"));");
            ctxt.generateJavaSource("    if(" + requestDispatcherName + " == null) throw new JspTagException(org.apache.struts2.jasper.tagplugins.jstl.Util.stripSession("+urlName+"));");
            
            //initialize a ImportResponseWrapper to include the resource
            ctxt.generateJavaSource("    org.apache.struts2.jasper.tagplugins.jstl.Util.ImportResponseWrapper " + irwName + " = new org.apache.struts2.jasper.tagplugins.jstl.Util.ImportResponseWrapper((HttpServletResponse) pageContext.getResponse());");
            ctxt.generateJavaSource("    if(" + charSetName + " == null){");
            ctxt.generateJavaSource("        " + charSetName + " = org.apache.struts2.jasper.tagplugins.jstl.Util.DEFAULT_ENCODING;");
            ctxt.generateJavaSource("    }");
            ctxt.generateJavaSource("    " + irwName + ".setCharEncoding(" + charSetName + ");");
            ctxt.generateJavaSource("    try{");
            ctxt.generateJavaSource("        " + requestDispatcherName + ".include(pageContext.getRequest(), " + irwName + ");");
            ctxt.generateJavaSource("    }catch(java.io.IOException ex){");
            ctxt.generateJavaSource("        throw new JspException(ex);");
            ctxt.generateJavaSource("    }catch(RuntimeException ex){");
            ctxt.generateJavaSource("        throw new JspException(ex);");
            ctxt.generateJavaSource("    }catch(ServletException ex){");
            ctxt.generateJavaSource("        Throwable rc = ex.getRootCause();");
            ctxt.generateJavaSource("        if (rc == null)");
            ctxt.generateJavaSource("            throw new JspException(ex);");
            ctxt.generateJavaSource("        else");
            ctxt.generateJavaSource("            throw new JspException(rc);");
            ctxt.generateJavaSource("    }");
            
            //validate the response status
            ctxt.generateJavaSource("    if(" + irwName + ".getStatus() < 200 || " + irwName + ".getStatus() > 299){");
            ctxt.generateJavaSource("        throw new JspTagException(" + irwName + ".getStatus()+\" \" + org.apache.struts2.jasper.tagplugins.jstl.Util.stripSession(" + urlName + "));");
            ctxt.generateJavaSource("    }");
            
            ctxt.generateJavaSource("    " + tempStringName + " = " + irwName + ".getString();");
]]>
</codefragment>
</duplication>
<duplication lines="37" tokens="208">
<file line="37" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/DoubleSelectTest.java"/>
<file line="165" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/DoubleSelectTest.java"/>
<codefragment>
<![CDATA[
    public void testDoubleWithDefaultSelectedValues() throws Exception {

        TestAction testAction = (TestAction) action;

        Region antwerp = new Region("Antwerp", "AN");
        Region gent = new Region("Gent", "GN");
        Region brugge = new Region("Brugge", "BRG");
        ArrayList belgiumRegions = new ArrayList();
        belgiumRegions.add(antwerp);
        belgiumRegions.add(gent);
        belgiumRegions.add(brugge);
        Country belgium = new Country("Belgium", "BE", belgiumRegions);

        Region paris = new Region("Paris", "PA");
        Region bordeaux = new Region("Bordeaux", "BOR");
        ArrayList franceRegions = new ArrayList();
        franceRegions.add(paris);
        franceRegions.add(bordeaux);
        Country france = new Country("France", "FR", franceRegions);

        Collection collection = new ArrayList(2);
        collection.add("AN");
        testAction.setCollection(collection);

        List countries = new ArrayList();
        countries.add(belgium);
        countries.add(france);

        testAction.setList2(countries);

        DoubleSelectTag tag = new DoubleSelectTag();
        tag.setPageContext(pageContext);
        tag.setLabel("mylabel");
        tag.setName("foo");
        tag.setDoubleName("region");

        tag.setValue("'FR'");
]]>
</codefragment>
</duplication>
<duplication lines="73" tokens="208">
<file line="92" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/apps/showcase/src/main/java/org/apache/struts2/showcase/validation/BeanValidationExampleAction.java"/>
<file line="43" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/apps/showcase/src/main/java/org/apache/struts2/showcase/validation/FieldValidatorsExampleAction.java"/>
<codefragment>
<![CDATA[
    public Date getDateValidatorField() {
        return dateValidatorField;
    }

    public void setDateValidatorField(Date dateValidatorField) {
        this.dateValidatorField = dateValidatorField;
    }

    public String getEmailValidatorField() {
        return emailValidatorField;
    }

    public void setEmailValidatorField(String emailValidatorField) {
        this.emailValidatorField = emailValidatorField;
    }

    public Integer getIntegerValidatorField() {
        return integerValidatorField;
    }

    public void setIntegerValidatorField(Integer integerValidatorField) {
        this.integerValidatorField = integerValidatorField;
    }

    public String getRegexValidatorField() {
        return regexValidatorField;
    }

    public void setRegexValidatorField(String regexValidatorField) {
        this.regexValidatorField = regexValidatorField;
    }

    public String getRequiredStringValidatorField() {
        return requiredStringValidatorField;
    }

    public void setRequiredStringValidatorField(String requiredStringValidatorField) {
        this.requiredStringValidatorField = requiredStringValidatorField;
    }

    public String getRequiredValidatorField() {
        return requiredValidatorField;
    }

    public void setRequiredValidatorField(String requiredValidatorField) {
        this.requiredValidatorField = requiredValidatorField;
    }

    public String getStringLengthValidatorField() {
        return stringLengthValidatorField;
    }

    public void setStringLengthValidatorField(String stringLengthValidatorField) {
        this.stringLengthValidatorField = stringLengthValidatorField;
    }

    public String getFieldExpressionValidatorField() {
        return fieldExpressionValidatorField;
    }

    public void setFieldExpressionValidatorField(
            String fieldExpressionValidatorField) {
        this.fieldExpressionValidatorField = fieldExpressionValidatorField;
    }

    public String getUrlValidatorField() {
        return urlValidatorField;
    }

    public void setUrlValidatorField(String urlValidatorField) {
        this.urlValidatorField = urlValidatorField;
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="207">
<file line="165" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ParseException.java"/>
<file line="46" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/TokenMgrError.java"/>
<codefragment>
<![CDATA[
   protected static final String addEscapes(String str) {
      StringBuilder retval = new StringBuilder();
      char ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case 0 :
              continue;
           case '\b':
              retval.append("\\b");
              continue;
           case '\t':
              retval.append("\\t");
              continue;
           case '\n':
              retval.append("\\n");
              continue;
           case '\f':
              retval.append("\\f");
              continue;
           case '\r':
              retval.append("\\r");
              continue;
           case '\"':
              retval.append("\\\"");
              continue;
           case '\'':
              retval.append("\\\'");
              continue;
           case '\\':
              retval.append("\\\\");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 String s = "0000" + Integer.toString(ch, 16);
                 retval.append("\\u").append(s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
        }
      }
      return retval.toString();
   }
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="205">
<file line="523" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/XWorkConverterTest.java"/>
<file line="533" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        context.put(ActionContext.LOCALE, Locale.GERMANY);
        assertEquals(new Double(123.12), converter.convertValue(context, null, null, null, "123.12", double.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "123aa", double.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "aa123", double.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1,234", double.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1,234.12", double.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1,23", double.class));
        assertEquals(new Double(1.234), converter.convertValue(context, null, null, null, "1.234", double.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1.234,12", double.class));
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="201">
<file line="98" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java"/>
<file line="454" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java"/>
<codefragment>
<![CDATA[
    public void testDisableSomeButtons() throws Exception {
        List left = new ArrayList();
        left.add("Left2");

        List right = new ArrayList();
        right.add("Right2");

        List leftVal = new ArrayList();
        leftVal.add("Left1");
        leftVal.add("Left2");
        leftVal.add("Left3");

        List rightVal = new ArrayList();
        rightVal.add("Right1");
        rightVal.add("Right2");
        rightVal.add("Right3");


        TestAction testaction = (TestAction) action;
        testaction.setCollection(left);
        testaction.setList2(right);
        testaction.setCollection2(leftVal);
        testaction.setList3(rightVal);


        OptionTransferSelectTag tag = new OptionTransferSelectTag();
        tag.setPageContext(pageContext);

        tag.setName("collection");
        tag.setId("id");
        tag.setList("collection2");
        tag.setSize("20");
        tag.setMultiple("true");
        tag.setEmptyOption("true");

        tag.setDoubleName("list2");
        tag.setDoubleList("list3");
        tag.setDoubleId("doubleId");
        tag.setDoubleSize("20");
        tag.setMultiple("true");
        tag.setDoubleEmptyOption("true");

        tag.setAllowAddAllToLeft("false");
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="201">
<file line="475" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/XWorkConverterTest.java"/>
<file line="484" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        context.put(ActionContext.LOCALE, Locale.GERMANY);
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "123.12", int.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "123aa", int.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "aa123", int.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1,234", int.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1,23", int.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1,234.12", int.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1.234", int.class));
        assertEquals(OgnlRuntime.NoConversionPossible, converter.convertValue(context, null, null, null, "1.234,12", int.class));
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="198">
<file line="37" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/DoubleSelectTest.java"/>
<file line="228" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/DoubleSelectTest.java"/>
<codefragment>
<![CDATA[
    public void testDoubleWithDotName() throws Exception {
        TestAction testAction = (TestAction) action;

        Region antwerp = new Region("Antwerp", "AN");
        Region gent = new Region("Gent", "GN");
        Region brugge = new Region("Brugge", "BRG");
        ArrayList belgiumRegions = new ArrayList();
        belgiumRegions.add(antwerp);
        belgiumRegions.add(gent);
        belgiumRegions.add(brugge);
        Country belgium = new Country("Belgium", "BE", belgiumRegions);

        Region paris = new Region("Paris", "PA");
        Region bordeaux = new Region("Bordeaux", "BOR");
        ArrayList franceRegions = new ArrayList();
        franceRegions.add(paris);
        franceRegions.add(bordeaux);
        Country france = new Country("France", "FR", franceRegions);

        Collection collection = new ArrayList(2);
        collection.add("AN");
        testAction.setCollection(collection);

        List countries = new ArrayList();
        countries.add(belgium);
        countries.add(france);

        testAction.setList2(countries);

        DoubleSelectTag tag = new DoubleSelectTag();
        tag.setPageContext(pageContext);
        tag.setLabel("mylabel");
        tag.setName("foo.bar");
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="197">
<file line="76" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ActionTagTest.java"/>
<file line="114" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ActionTagTest.java"/>
<codefragment>
<![CDATA[
        request.setupGetServletPath("/foo!foo.action");

        ActionConfig config = configuration.getRuntimeConfiguration().getActionConfig("", "testAction");
        container.inject(config.getInterceptors().get(0).getInterceptor());

        ActionTag tag = new ActionTag();
        tag.setPageContext(pageContext);
        tag.setName("testAction");
        tag.setVar("testAction");

        int stackSize = stack.size();

        try {
            tag.doStartTag();
            tag.addParameter("foo", "myFoo");
            tag.doEndTag();

            assertEquals(stack.size(), ActionContext.getContext().getValueStack().size());
            assertEquals("myFoo", stack.findValue("#testAction.foo"));
            assertEquals(stackSize, stack.size());

            Object o = pageContext.findAttribute("testAction");
            assertTrue(o instanceof TestAction);
            assertEquals("myFoo", ((TestAction) o).getFoo());
            assertEquals(Action.SUCCESS, ((TestAction) o).getResult());
        } catch (JspException ex) {
            ex.printStackTrace();
            fail();
        }
    }

    public void testActionWithExecuteResult() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="58" tokens="196">
<file line="86" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/views/jsp/URLTag.java"/>
<file line="90" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/views/jsp/ui/AnchorTag.java"/>
<codefragment>
<![CDATA[
    }

    public void setEncode(String encode) {
        this.encode = encode;
    }

    public void setIncludeContext(String includeContext) {
        this.includeContext = includeContext;
    }

    public void setEscapeAmp(String escapeAmp) {
        this.escapeAmp = escapeAmp;
    }

    public void setIncludeParams(String name) {
        includeParams = name;
    }

    public void setAction(String action) {
        this.action = action;
    }

    public void setNamespace(String namespace) {
        this.namespace = namespace;
    }

    public void setMethod(String method) {
        this.method = method;
    }

    public void setScheme(String scheme) {
        this.scheme = scheme;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public void setPortletMode(String portletMode) {
        this.portletMode = portletMode;
    }

    public void setPortletUrlType(String portletUrlType) {
        this.portletUrlType = portletUrlType;
    }

    public void setWindowState(String windowState) {
        this.windowState = windowState;
    }

    public void setAnchor(String anchor) {
        this.anchor = anchor;
    }

    public void setForceAddSchemeHostAndPort(String forceAddSchemeHostAndPort) {
        this.forceAddSchemeHostAndPort = forceAddSchemeHostAndPort;
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="195">
<file line="98" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java"/>
<file line="381" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java"/>
<codefragment>
<![CDATA[
    public void testWithoutEmptyOptionOnOneSide() throws Exception {
        List left = new ArrayList();
        left.add("Left2");

        List right = new ArrayList();
        right.add("Right2");

        List leftVal = new ArrayList();
        leftVal.add("Left1");
        leftVal.add("Left2");
        leftVal.add("Left3");

        List rightVal = new ArrayList();
        rightVal.add("Right1");
        rightVal.add("Right2");
        rightVal.add("Right3");


        TestAction testaction = (TestAction) action;
        testaction.setCollection(left);
        testaction.setList2(right);
        testaction.setCollection2(leftVal);
        testaction.setList3(rightVal);


        OptionTransferSelectTag tag = new OptionTransferSelectTag();
        tag.setPageContext(pageContext);

        tag.setName("collection");
        tag.setId("id");
        tag.setList("collection2");
        tag.setSize("20");
        tag.setMultiple("true");
        tag.setEmptyOption("true");

        tag.setDoubleName("list2");
        tag.setDoubleList("list3");
        tag.setDoubleId("doubleId");
        tag.setDoubleSize("20");
        tag.setMultiple("true");
        tag.setDoubleEmptyOption("false");
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="194">
<file line="129" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/result/PortletResultTest.java"/>
<file line="197" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/result/PortletResultTest.java"/>
<codefragment>
<![CDATA[
        params = new Constraint[]{eq("testParam2"), eq("testValue2")};
        mockResponse.expects(once()).method("setRenderParameter").with(params);
        params = new Constraint[]{eq(MODE_PARAM), eq(PortletMode.VIEW.toString())};
        mockResponse.expects(once()).method("setRenderParameter").with(params);
        params = new Constraint[]{eq(PortletConstants.RENDER_DIRECT_NAMESPACE), eq("/test")};
        mockResponse.expects(once()).method("setRenderParameter").with(params);
        
        mockRequest.stubs().method("getPortletMode").will(returnValue(PortletMode.VIEW));
        mockCtx.expects(atLeastOnce()).method("getMajorVersion").will(returnValue(1));

        ActionContext ctx = ActionContext.getContext();

        ctx.put(REQUEST, mockRequest.proxy());
        ctx.put(RESPONSE, mockResponse.proxy());
        ctx.put(PHASE, PortletPhase.ACTION_PHASE);

        PortletResult result = new PortletResult();
        try {
            result.doExecute("testView.action?testParam1=testValue1&testParam2=testValue2", (ActionInvocation)mockInvocation.proxy());
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="191">
<file line="67" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/config/providers/InterceptorBuilderTest.java"/>
<file line="108" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/config/providers/InterceptorBuilderTest.java"/>
<codefragment>
<![CDATA[
        assertEquals(interceptorMappings.size(), 3);

        assertEquals(((InterceptorMapping) interceptorMappings.get(0)).getName(), "interceptor1");
        assertNotNull(((InterceptorMapping) interceptorMappings.get(0)).getInterceptor());
        assertEquals(((InterceptorMapping) interceptorMappings.get(0)).getInterceptor().getClass(), MockInterceptor1.class);
        assertEquals(((MockInterceptor1) ((InterceptorMapping) interceptorMappings.get(0)).getInterceptor()).getParam1(), "interceptor1_value1");
        assertEquals(((MockInterceptor1) ((InterceptorMapping) interceptorMappings.get(0)).getInterceptor()).getParam2(), "interceptor1_value2");

        assertEquals(((InterceptorMapping) interceptorMappings.get(1)).getName(), "interceptor2");
        assertNotNull(((InterceptorMapping) interceptorMappings.get(1)).getInterceptor());
        assertEquals(((InterceptorMapping) interceptorMappings.get(1)).getInterceptor().getClass(), MockInterceptor2.class);

        assertEquals(((InterceptorMapping) interceptorMappings.get(2)).getName(), "interceptor1");
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="186">
<file line="80" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/dispatcher/ApplicationMap.java"/>
<file line="116" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/dispatcher/ApplicationMap.java"/>
<codefragment>
<![CDATA[
                final Object value = context.getInitParameter(key);
                entries.add(new Map.Entry() {
                    public boolean equals(Object obj) {
                        if (!(obj instanceof Map.Entry)) {
                            return false;
                        }
                        Map.Entry entry = (Map.Entry) obj;

                        return ((key == null) ? (entry.getKey() == null) : key.equals(entry.getKey())) && ((value == null) ? (entry.getValue() == null) : value.equals(entry.getValue()));
                    }

                    public int hashCode() {
                        return ((key == null) ? 0 : key.hashCode()) ^ ((value == null) ? 0 : value.hashCode());
                    }

                    public Object getKey() {
                        return key;
                    }

                    public Object getValue() {
                        return value;
                    }

                    public Object setValue(Object obj) {
                        context.setAttribute(key, obj);

                        return value;
                    }
                });
            }
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="185">
<file line="115" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/ExpressionValidatorTest.java"/>
<file line="193" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/StringValidatorTest.java"/>
<codefragment>
<![CDATA[
        assertEquals(false, val.isTrim());
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        loadConfigurationProviders(new MockConfigurationProvider());

        ActionConfig config = new ActionConfig.Builder("", "name", "").build();
        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
        ActionProxy proxy = EasyMock.createNiceMock(ActionProxy.class);

        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(null).anyTimes();
        EasyMock.expect(invocation.invoke()).andReturn(Action.SUCCESS).anyTimes();
        EasyMock.expect(proxy.getMethod()).andReturn("execute").anyTimes();
        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();


        EasyMock.replay(invocation);
        EasyMock.replay(proxy);

        ActionContext.getContext().setActionInvocation(invocation);
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="145" tokens="177">
<file line="349" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/runtime/BodyContentImpl.java"/>
<file line="515" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/runtime/JspWriterImpl.java"/>
<codefragment>
<![CDATA[
    }
    
    /* Methods that do terminate lines */
    
    /**
     * Terminate the current line by writing the line separator string.  The
     * line separator string is defined by the system property
     * <code>line.separator</code>, and is not necessarily a single newline
     * character (<code>'\n'</code>).
     *
     * Need to change this from PrintWriter because the default
     * println() writes  to the sink directly instead of through the
     * write method...
     *
     * @throws IOException in case of IO errors
     */
    public void println() throws IOException {
        newLine();
    }
    
    /**
     * Print a boolean value and then terminate the line.  This method behaves
     * as though it invokes <code>{@link #print(boolean)}</code> and then
     * <code>{@link #println()}</code>.
     *
     * @param      x   The <code>boolean</code> to be printed
     *
     * @throws IOException in case of IO errors
     */
    public void println(boolean x) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print a character and then terminate the line.  This method behaves as
     * though it invokes <code>{@link #print(char)}</code> and then <code>{@link
     * #println()}</code>.
     *
     * @param      x   The <code>char</code> to be printed
     *
     * @throws IOException in case of IO errors
     */
    public void println(char x) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print an integer and then terminate the line.  This method behaves as
     * though it invokes <code>{@link #print(int)}</code> and then <code>{@link
     * #println()}</code>.
     *
     * @param      x   The <code>int</code> to be printed
     *
     * @throws IOException in case of IO errors
     */
    public void println(int x) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print a long integer and then terminate the line.  This method behaves
     * as though it invokes <code>{@link #print(long)}</code> and then
     * <code>{@link #println()}</code>.
     *
     * @param      x   The <code>long</code> to be printed
     *
     * @throws IOException in case of IO errors
     */
    public void println(long x) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print a floating-point number and then terminate the line.  This method
     * behaves as though it invokes <code>{@link #print(float)}</code> and then
     * <code>{@link #println()}</code>.
     *
     * @param      x   The <code>float</code> to be printed
     *
     * @throws IOException in case of IO errors
     */
    public void println(float x) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print a double-precision floating-point number and then terminate the
     * line.  This method behaves as though it invokes <code>{@link
     * #print(double)}</code> and then <code>{@link #println()}</code>.
     *
     * @param      x   The <code>double</code> to be printed
     *
     * @throws IOException in case of IO errors
     */
    public void println(double x) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print an array of characters and then terminate the line.  This method
     * behaves as though it invokes <code>{@link #print(char[])}</code> and then
     * <code>{@link #println()}</code>.
     *
     * @param      x   The <code>char[]</code> to be printed
     *
     * @throws IOException in case of IO errors
     */
    public void println(char x[]) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print a String and then terminate the line.  This method behaves as
     * though it invokes <code>{@link #print(String)}</code> and then
     * <code>{@link #println()}</code>.
     *
     * @param      x   The <code>String</code> to be printed
     *
     * @throws IOException in case of IO errors
     */
    public void println(String x) throws IOException {
        print(x);
        println();
    }
    
    /**
     * Print an Object and then terminate the line.  This method behaves as
     * though it invokes <code>{@link #print(Object)}</code> and then
     * <code>{@link #println()}</code>.
     *
     * @param      x   The <code>Object</code> to be printed
     *
     * @throws IOException in case of IO errors
     */
    public void println(Object x) throws IOException {
        print(x);
        println();
    }
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="176">
<file line="45" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/XWorkJUnit4TestCase.java"/>
<file line="56" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/XWorkTestCase.java"/>
<codefragment>
<![CDATA[
    protected void tearDown() throws Exception {
        XWorkTestCaseHelper.tearDown(configurationManager);
        configurationManager = null;
        configuration = null;
        container = null;
        actionProxyFactory = null;
    }
    
    protected void loadConfigurationProviders(ConfigurationProvider... providers) {
        configurationManager = XWorkTestCaseHelper.loadConfigurationProviders(configurationManager, providers);
        configuration = configurationManager.getConfiguration();
        container = configuration.getContainer();
        actionProxyFactory = container.getInstance(ActionProxyFactory.class);
    }
    
    protected void loadButAdd(final Class<?> type, final Object impl) {
        loadButAdd(type, Container.DEFAULT_NAME, impl);
    }
    
    protected void loadButAdd(final Class<?> type, final String name, final Object impl) {
        loadConfigurationProviders(new StubConfigurationProvider() {
            @Override
            public void register(ContainerBuilder builder,
                    LocatableProperties props) throws ConfigurationException {
                builder.factory(type, name, new Factory() {
                    public Object create(Context context) throws Exception {
                        return impl;
                    }
                    
                }, Scope.SINGLETON);
            }
        });
    }
    
}
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="174">
<file line="83" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/main/java/org/apache/struts2/portlet/PortletApplicationMap.java"/>
<file line="120" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/main/java/org/apache/struts2/portlet/PortletApplicationMap.java"/>
<codefragment>
<![CDATA[
                final Object value = context.getInitParameter(key);
                entries.add(new Entry<String, Object>() {
                    public boolean equals(Object obj) {
                        Map.Entry entry = (Map.Entry) obj;

                        return ((key == null) ? (entry.getKey() == null) : key
                                .equals(entry.getKey()))
                                && ((value == null) ? (entry.getValue() == null)
                                        : value.equals(entry.getValue()));
                    }

                    public int hashCode() {
                        return ((key == null) ? 0 : key.hashCode())
                                ^ ((value == null) ? 0 : value.hashCode());
                    }

                    public String getKey() {
                        return key;
                    }

                    public Object getValue() {
                        return value;
                    }

                    public Object setValue(Object obj) {
                        context.setAttribute(key, obj);

                        return value;
                    }
                });
            }
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="174">
<file line="268" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/JSONResultTest.java"/>
<file line="365" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/JSONResultTest.java"/>
<codefragment>
<![CDATA[
        bean2.setEnumBean(AnEnumBean.Three);

        // circular reference
        bean1.setObjectField(bean2);
        bean2.setObjectField(bean1);

        collection2.add(bean1);
        action.setCollection2(collection2);

        // keep order in map
        Map map = new LinkedHashMap();

        map.put("a", 1);
        map.put("c", new float[] { 1.0f, 2.0f });
        action.setMap(map);

        action.setFoo("foo");
        // should be ignored, marked 'transient'
        action.setBar("bar");

        // date
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.YEAR, 1999);
        calendar.set(Calendar.MONTH, Calendar.DECEMBER);
        calendar.set(Calendar.DAY_OF_MONTH, 31);
        calendar.set(Calendar.HOUR_OF_DAY, 11);
        calendar.set(Calendar.MINUTE, 59);
        calendar.set(Calendar.SECOND, 59);
        action.setDate(calendar.getTime());
        action.setDate2(calendar.getTime());

        this.invocation.setAction(action);
        result.setWrapWithComments(true);
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="174">
<file line="115" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/MessageStorePreResultListenerTest.java"/>
<file line="195" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/MessageStorePreResultListenerTest.java"/>
<codefragment>
<![CDATA[
        actionContext.setSession(sessionMap);

        HttpSession mockedSession = EasyMock.createControl().createMock(HttpSession.class);
        HttpServletRequest mockedRequest = EasyMock.createControl().createMock(HttpServletRequest.class);
        mockedRequest.getSession(false);
        EasyMock.expectLastCall().andReturn(mockedSession);
        EasyMock.expectLastCall().once();
        ServletActionContext.setRequest(mockedRequest);

        EasyMock.replay(mockedRequest);

        HttpServletResponse mockedResponse = EasyMock.createControl().createMock(HttpServletResponse.class);
        mockedResponse.isCommitted();
        EasyMock.expectLastCall().andReturn(false);
        EasyMock.expectLastCall().once();
        ServletActionContext.setResponse(mockedResponse);

        EasyMock.replay(mockedResponse);

        // Mock (ActionInvocation)
        ActionInvocation mockActionInvocation = EasyMock.createControl().createMock(ActionInvocation.class);
        mockActionInvocation.getInvocationContext();
        EasyMock.expectLastCall().andReturn(actionContext);
        EasyMock.expectLastCall().anyTimes();

        mockActionInvocation.getAction();
        EasyMock.expectLastCall().andReturn(action);
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="174">
<file line="42" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/StrutsInternalTestCase.java"/>
<file line="72" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/junit/src/main/java/org/apache/struts2/StrutsJUnit4TestCase.java"/>
<codefragment>
<![CDATA[
    static {
        ConsoleHandler handler = new ConsoleHandler();
        final SimpleDateFormat df = new SimpleDateFormat("mm:ss.SSS");
        Formatter formatter = new Formatter() {
            @Override
            public String format(LogRecord record) {
                StringBuilder sb = new StringBuilder();
                sb.append(record.getLevel());
                sb.append(':');
                for (int x = 9 - record.getLevel().toString().length(); x > 0; x--) {
                    sb.append(' ');
                }
                sb.append('[');
                sb.append(df.format(new Date(record.getMillis())));
                sb.append("] ");
                sb.append(formatMessage(record));
                sb.append('\n');
                return sb.toString();
            }
        };
        handler.setFormatter(formatter);
        Logger logger = Logger.getLogger("");
        if (logger.getHandlers().length > 0)
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="172">
<file line="192" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java"/>
<file line="234" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java"/>
<file line="275" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java"/>
<codefragment>
<![CDATA[
        interceptor.setCookiesValue("");
        interceptor.intercept(invocation);

        assertFalse(action.getCookiesMap().isEmpty());
        assertEquals(action.getCookiesMap().size(), 2);
        assertEquals(action.getCookiesMap().get("cookie1"), "cookie1value");
        assertEquals(action.getCookiesMap().get("cookie2"), null);
        assertEquals(action.getCookiesMap().get("cookie3"), "cookie3value");
        assertEquals(action.getCookie1(), "cookie1value");
        assertEquals(action.getCookie2(), null);
        assertEquals(action.getCookie3(), "cookie3value");
        assertEquals(ActionContext.getContext().getValueStack().findValue("cookie1"), "cookie1value");
        assertEquals(ActionContext.getContext().getValueStack().findValue("cookie2"), null);
        assertEquals(ActionContext.getContext().getValueStack().findValue("cookie3"), "cookie3value");
        
        verify(invocation);
    }


    public void testInterceptSelectedCookiesNameAndValue() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="172">
<file line="109" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java"/>
<file line="151" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java"/>
<codefragment>
<![CDATA[
        interceptor.setCookiesValue("cookie1value, cookie2value, cookie3value");
        interceptor.intercept(invocation);

        assertFalse(action.getCookiesMap().isEmpty());
        assertEquals(action.getCookiesMap().size(), 3);
        assertEquals(action.getCookiesMap().get("cookie1"), "cookie1value");
        assertEquals(action.getCookiesMap().get("cookie2"), "cookie2value");
        assertEquals(action.getCookiesMap().get("cookie3"), "cookie3value");
        assertEquals(action.getCookie1(), "cookie1value");
        assertEquals(action.getCookie2(), "cookie2value");
        assertEquals(action.getCookie3(), "cookie3value");
        assertEquals(ActionContext.getContext().getValueStack().findValue("cookie1"), "cookie1value");
        assertEquals(ActionContext.getContext().getValueStack().findValue("cookie2"), "cookie2value");
        assertEquals(ActionContext.getContext().getValueStack().findValue("cookie3"), "cookie3value");
        
        verify(invocation);
    }

    public void testInterceptSelectedCookiesNameOnly1() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="172">
<file line="52" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/DefaultTextProviderTest.java"/>
<file line="53" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/TextProviderSupportTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("not.in.bundle", tp.getText("not.in.bundle"));
    }

    public void testGetTextsWithListArgs() throws Exception {
        List<Object> args = new ArrayList<>();
        args.add("Santa");
        args.add("loud");
        assertEquals("Hello World", tp.getText("hello", "this is default", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", "this is default", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", "this is default", args));

        assertEquals("this is default", tp.getText("not.in.bundle", "this is default", args));
        assertEquals("this is default Santa", tp.getText("not.in.bundle", "this is default {0}", args));
        assertEquals("this is default Santa speaking loud", tp.getText("not.in.bundle", "this is default {0} speaking {1}", args));

        assertEquals("Hello World", tp.getText("hello", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", args));

        assertEquals("not.in.bundle", tp.getText("not.in.bundle", args));
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="170">
<file line="221" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/ognl/accessor/XWorkCollectionPropertyAccessor.java"/>
<file line="128" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/ognl/accessor/XWorkListPropertyAccessor.java"/>
<codefragment>
<![CDATA[
    }

    @Override
    public void setProperty(Map context, Object target, Object name, Object value)
            throws OgnlException {

        Class lastClass = (Class) context.get(XWorkConverter.LAST_BEAN_CLASS_ACCESSED);
        String lastProperty = (String) context.get(XWorkConverter.LAST_BEAN_PROPERTY_ACCESSED);
        Class convertToClass = objectTypeDeterminer.getElementClass(lastClass, lastProperty, name);

        if (name instanceof String && value.getClass().isArray()) {
            // looks like the input game in the form of "someList.foo" and
            // we are expected to define the index values ourselves.
            // So let's do it:

            Collection c = (Collection) target;
            Object[] values = (Object[]) value;
            for (Object v : values) {
                try {
                    Object o = objectFactory.buildBean(convertToClass, context);
                    ognlUtil.setValue((String) name, context, o, v);
                    c.add(o);
                } catch (Exception e) {
                    throw new OgnlException("Error converting given String values for Collection.", e);
                }
            }

            // we don't want to do the normal list property setting now, since we've already done the work
            // just return instead
            return;
        }

        Object realValue = getRealValue(context, value, convertToClass);
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="169">
<file line="71" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/el/JspMethodExpression.java"/>
<file line="101" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/el/JspValueExpression.java"/>
<codefragment>
<![CDATA[
            return this.target.getValue(context);
        } catch (PropertyNotFoundException e) {
            if (e instanceof JspPropertyNotFoundException) throw e;
            throw new JspPropertyNotFoundException(this.mark, e);
        } catch (ELException e) {
            if (e instanceof JspELException) throw e;
            throw new JspELException(this.mark, e);
        }
    }

    public boolean equals(Object obj) {
        return this.target.equals(obj);
    }

    public int hashCode() {
        return this.target.hashCode();
    }

    public String getExpressionString() {
        return this.target.getExpressionString();
    }

    public boolean isLiteralText() {
        return this.target.isLiteralText();
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeUTF(this.mark);
        out.writeObject(this.target);
    }

    public void readExternal(ObjectInput in) throws IOException,
            ClassNotFoundException {
        this.mark = in.readUTF();
        this.target = (ValueExpression) in.readObject();
]]>
</codefragment>
</duplication>
<duplication lines="59" tokens="168">
<file line="130" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/SimpleAction.java"/>
<file line="116" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/SimpleAnnotationAction.java"/>
<codefragment>
<![CDATA[
    public void setDate(Date date) {
        this.date = date;
    }

    public Date getDate() {
        return date;
    }

    public void setFoo(int foo) {
        this.foo = foo;
    }

    public int getFoo() {
        return foo;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setSettings(Properties settings) {
        this.settings = settings;
    }

    public Properties getSettings() {
        return settings;
    }


    public String getAliasDest() {
        return aliasDest;
    }

    public void setAliasDest(String aliasDest) {
        this.aliasDest = aliasDest;
    }

    public String getAliasSource() {
        return aliasSource;
    }

    public void setAliasSource(String aliasSource) {
        this.aliasSource = aliasSource;
    }

    
    public void setSomeList(ArrayList<String> someList) {
        this.someList = someList;
    }

    public ArrayList<String> getSomeList() {
        return someList;
    }

    public void setThrowException(boolean throwException) {
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="166">
<file line="44" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/IteratorGeneratorTagTest.java"/>
<file line="82" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/IteratorGeneratorTagTest.java"/>
<codefragment>
<![CDATA[
        Object afterTopOfStack = stack.findValue("top");

        assertTrue(topOfStack instanceof Iterator);
        // 1
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "aaa");
        // 2
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "bbb");
        // 3
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "ccc");
        // 4
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "ddd");
        // 5
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "eee");

        assertFalse(((Iterator)topOfStack).hasNext());
]]>
</codefragment>
</duplication>
<duplication lines="40" tokens="166">
<file line="504" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/util/tomcat/buf/StringCache.java"/>
<file line="598" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/util/tomcat/buf/StringCache.java"/>
<codefragment>
<![CDATA[
    protected static final int findClosest(CharChunk name, CharEntry[] array,
            int len) {

        int a = 0;
        int b = len - 1;

        // Special cases: -1 and 0
        if (b == -1) {
            return -1;
        }

        if (compare(name, array[0].name) < 0 ) {
            return -1;
        }
        if (b == 0) {
            return 0;
        }

        int i = 0;
        while (true) {
            i = (b + a) >>> 1;
            int result = compare(name, array[i].name);
            if (result == 1) {
                a = i;
            } else if (result == 0) {
                return i;
            } else {
                b = i;
            }
            if ((b - a) == 1) {
                int result2 = compare(name, array[b].name);
                if (result2 < 0) {
                    return a;
                } else {
                    return b;
                }
            }
        }

    }
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="166">
<file line="244" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/util/DomHelper.java"/>
<file line="322" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/util/location/LocationAttributes.java"/>
<codefragment>
<![CDATA[
            nextHandler.startElement(uri, loc, raw, LocationAttributes.addLocationAttributes(locator, attrs));
        }

        public void endElement(String arg0, String arg1, String arg2) throws SAXException {
            nextHandler.endElement(arg0, arg1, arg2);
        }

        public void startPrefixMapping(String arg0, String arg1) throws SAXException {
            nextHandler.startPrefixMapping(arg0, arg1);
        }

        public void endPrefixMapping(String arg0) throws SAXException {
            nextHandler.endPrefixMapping(arg0);
        }

        public void characters(char[] arg0, int arg1, int arg2) throws SAXException {
            nextHandler.characters(arg0, arg1, arg2);
        }

        public void ignorableWhitespace(char[] arg0, int arg1, int arg2) throws SAXException {
            nextHandler.ignorableWhitespace(arg0, arg1, arg2);
        }

        public void processingInstruction(String arg0, String arg1) throws SAXException {
            nextHandler.processingInstruction(arg0, arg1);
        }

        public void skippedEntity(String arg0) throws SAXException {
            nextHandler.skippedEntity(arg0);
        }
    }
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="163">
<file line="341" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java"/>
<file line="414" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java"/>
<codefragment>
<![CDATA[
        tag.setEmptyOption("true");

        tag.setDoubleName("list2");
        tag.setDoubleList("list3");
        tag.setDoubleId("doubleId");
        tag.setDoubleSize("20");
        tag.setMultiple("true");
        tag.setDoubleEmptyOption("false");

        tag.setAllowAddAllToLeft("true");
        tag.setAllowAddAllToRight("true");
        tag.setAllowAddToLeft("true");
        tag.setAllowAddToRight("true");
        tag.setAllowSelectAll("true");

        tag.setAddAllToLeftLabel("All Left");
        tag.setAddAllToRightLabel("All Right");
        tag.setAddToLeftLabel("Left");
        tag.setAddToRightLabel("Right");
        tag.setSelectAllLabel("Select All");

        tag.setLeftTitle("Title Left");
        tag.setRightTitle("Title Right");

        tag.setButtonCssClass("buttonCssClass");
        tag.setButtonCssStyle("buttonCssStyle");

        tag.setHeaderKey("Header Key");
        tag.setHeaderValue("Header Value");

        tag.setDoubleHeaderKey("Double Header Key");
        tag.setDoubleHeaderValue("Double Header Value");

        tag.doStartTag();
        tag.doEndTag();

        //System.out.println(writer.toString());
        verify(OptionTransferSelectTagTest.class.getResource("optiontransferselect-6.txt"));
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="163">
<file line="45" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/VisitorFieldValidatorModelTest.java"/>
<file line="347" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/FormTagTest.java"/>
<codefragment>
<![CDATA[
        ActionContext.getContext().setValueStack(stack);

        ActionConfig config = new ActionConfig.Builder("", "name", "").build();
        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
        ActionProxy proxy = EasyMock.createNiceMock(ActionProxy.class);

        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(null).anyTimes();
        EasyMock.expect(invocation.invoke()).andReturn(Action.SUCCESS).anyTimes();
        EasyMock.expect(proxy.getMethod()).andReturn("execute").anyTimes();
        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();

        EasyMock.replay(invocation);
        EasyMock.replay(proxy);

        ActionContext.getContext().setActionInvocation(invocation);
    }

    /**
     * This test with form tag validation disabled.
     */
    public void testFormWithCustomOnsubmitEnabledWithValidateDisabled() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="162">
<file line="83" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/main/java/org/apache/struts2/portlet/PortletApplicationMap.java"/>
<file line="63" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/main/java/org/apache/struts2/portlet/PortletSessionMap.java"/>
<codefragment>
<![CDATA[
                    final Object value = session.getAttribute(key);
                    entries.add(new Entry<String, Object>() {
                        public boolean equals(Object obj) {
                            Map.Entry entry = (Map.Entry) obj;

                            return ((key == null) ? (entry.getKey() == null)
                                    : key.equals(entry.getKey()))
                                    && ((value == null) ? (entry.getValue() == null)
                                            : value.equals(entry.getValue()));
                        }

                        public int hashCode() {
                            return ((key == null) ? 0 : key.hashCode())
                                    ^ ((value == null) ? 0 : value.hashCode());
                        }

                        public String getKey() {
                            return key;
                        }

                        public Object getValue() {
                            return value;
                        }

                        public Object setValue(Object obj) {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="161">
<file line="122" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/ExpressionValidatorTest.java"/>
<file line="45" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/VisitorFieldValidatorModelTest.java"/>
<codefragment>
<![CDATA[
        bean.setCount(-1);

        ActionConfig config = new ActionConfig.Builder("", "name", "").build();
        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
        ActionProxy proxy = EasyMock.createNiceMock(ActionProxy.class);

        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(null).anyTimes();
        EasyMock.expect(invocation.invoke()).andReturn(Action.SUCCESS).anyTimes();
        EasyMock.expect(proxy.getMethod()).andReturn("execute").anyTimes();
        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();


        EasyMock.replay(invocation);
        EasyMock.replay(proxy);

        ActionContext.getContext().setActionInvocation(invocation);

    }
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="161">
<file line="339" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/AnnotationXWorkConverterTest.java"/>
<file line="432" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        assertEquals(new Long(123), converter.convertValue(context, null, null, null, "123", long.class));
        assertEquals(new Double(123.5), converter.convertValue(context, null, null, null, "123.5", double.class));
        assertEquals(new Float(123.5), converter.convertValue(context, null, null, null, "123.5", float.class));
        assertEquals(false, converter.convertValue(context, null, null, null, "false", boolean.class));
        assertEquals(true, converter.convertValue(context, null, null, null, "true", boolean.class));
        assertEquals(new BigDecimal(123.5), converter.convertValue(context, null, null, null, "123.5", BigDecimal.class));
        assertEquals(new BigInteger("123"), converter.convertValue(context, null, null, null, "123", BigInteger.class));
    }

    public void testOverflows() {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="160">
<file line="120" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/main/java/org/apache/struts2/portlet/PortletApplicationMap.java"/>
<file line="63" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/main/java/org/apache/struts2/portlet/PortletSessionMap.java"/>
<codefragment>
<![CDATA[
                    final Object value = session.getAttribute(key);
                    entries.add(new Entry<String, Object>() {
                        public boolean equals(Object obj) {
                            Map.Entry entry = (Map.Entry) obj;

                            return ((key == null) ? (entry.getKey() == null)
                                    : key.equals(entry.getKey()))
                                    && ((value == null) ? (entry.getValue() == null)
                                            : value.equals(entry.getValue()));
                        }

                        public int hashCode() {
                            return ((key == null) ? 0 : key.hashCode())
                                    ^ ((value == null) ? 0 : value.hashCode());
                        }

                        public String getKey() {
                            return key;
                        }

                        public Object getValue() {
                            return value;
                        }

                        public Object setValue(Object obj) {
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="160">
<file line="123" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/result/VelocityResult.java"/>
<file line="153" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/main/java/org/apache/struts2/portlet/result/PortletVelocityResult.java"/>
<codefragment>
<![CDATA[
    public void executeRenderResult(String finalLocation, ActionInvocation invocation) throws Exception {
        ValueStack stack = ActionContext.getContext().getValueStack();

        HttpServletRequest request = ServletActionContext.getRequest();
        HttpServletResponse response = ServletActionContext.getResponse();
        ServletContext servletContext = ServletActionContext.getServletContext();
        Servlet servlet = JspSupportServlet.jspSupportServlet;

        velocityManager.init(servletContext);

        boolean usedJspFactory = false;
        PageContext pageContext = (PageContext) ActionContext.getContext().get(ServletActionContext.PAGE_CONTEXT);

        if (pageContext == null && servlet != null) {
            pageContext = jspFactory.getPageContext(servlet, request, response, null, true, 8192, true);
            ActionContext.getContext().put(ServletActionContext.PAGE_CONTEXT, pageContext);
            usedJspFactory = true;
        }

        try {
            String encoding = getEncoding(finalLocation);
            String contentType = getContentType(finalLocation);

            if (encoding != null) {
                contentType = contentType + ";charset=" + encoding;
            }
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="159">
<file line="98" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java"/>
<file line="308" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java"/>
<codefragment>
<![CDATA[
    public void testWithoutEmptyOptionOnBothSides() throws Exception {
        List left = new ArrayList();
        left.add("Left2");

        List right = new ArrayList();
        right.add("Right2");

        List leftVal = new ArrayList();
        leftVal.add("Left1");
        leftVal.add("Left2");
        leftVal.add("Left3");

        List rightVal = new ArrayList();
        rightVal.add("Right1");
        rightVal.add("Right2");
        rightVal.add("Right3");


        TestAction testaction = (TestAction) action;
        testaction.setCollection(left);
        testaction.setList2(right);
        testaction.setCollection2(leftVal);
        testaction.setList3(rightVal);


        OptionTransferSelectTag tag = new OptionTransferSelectTag();
        tag.setPageContext(pageContext);

        tag.setName("collection");
        tag.setId("id");
        tag.setList("collection2");
        tag.setSize("20");
        tag.setMultiple("true");
        tag.setEmptyOption("false");
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="157">
<file line="189" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/MessageStoreInterceptorTest.java"/>
<file line="101" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/MessageStorePreResultListenerTest.java"/>
<codefragment>
<![CDATA[
        MessageStorePreResultListener listener = new MessageStorePreResultListener(interceptor);

        Map sessionMap = new LinkedHashMap();

        ActionSupport action = new ActionSupport();
        action.addActionError("some action error 1");
        action.addActionError("some action error 2");
        action.addActionMessage("some action message 1");
        action.addActionMessage("some action message 2");
        action.addFieldError("field1", "some field error 1");
        action.addFieldError("field2", "some field error 2");

        ActionContext actionContext = new ActionContext(new HashMap());
        actionContext.setParameters(HttpParameters.create().build());
        actionContext.put(ActionContext.SESSION, sessionMap);

        HttpSession mockedSession = EasyMock.createControl().createMock(HttpSession.class);
        HttpServletRequest mockedRequest = EasyMock.createControl().createMock(HttpServletRequest.class);
        mockedRequest.getSession(false);
        EasyMock.expectLastCall().andReturn(mockedSession);
        EasyMock.expectLastCall().once();
        ServletActionContext.setRequest(mockedRequest);

        EasyMock.replay(mockedRequest);
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="156">
<file line="145" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/result/ServletActionRedirectResultTest.java"/>
<file line="244" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/result/ServletRedirectResultTest.java"/>
<codefragment>
<![CDATA[
        result.setLocation("/myNamespace/myAction.action");
        result.setParse(false);
        result.setEncode(false);
        result.setPrependServletContext(false);
        result.setAnchor("fragment");
        result.setUrlHelper(new DefaultUrlHelper());

        IMocksControl control = createControl();
        ActionProxy mockActionProxy = control.createMock(ActionProxy.class);
        ActionInvocation mockInvocation = control.createMock(ActionInvocation.class);
        expect(mockInvocation.getProxy()).andReturn(mockActionProxy);
        expect(mockInvocation.getResultCode()).andReturn("myResult");
        expect(mockActionProxy.getConfig()).andReturn(actionConfig);
        expect(mockInvocation.getInvocationContext()).andReturn(context);

        control.replay();
        result.setActionMapper(container.getInstance(ActionMapper.class));
        result.execute(mockInvocation);
        assertEquals("/myNamespace/myAction.action?param1=value+1&param2=value+2&param3=value+3#fragment", res.getRedirectedUrl());
        control.verify();
    }

    public void testIncludeCollectionParameterInResult() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="155">
<file line="59" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/DefaultTextProviderTest.java"/>
<file line="79" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/DefaultTextProviderTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("Hello World", tp.getText("hello", "this is default", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", "this is default", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", "this is default", args));

        assertEquals("this is default", tp.getText("not.in.bundle", "this is default", args));
        assertEquals("this is default Santa", tp.getText("not.in.bundle", "this is default {0}", args));
        assertEquals("this is default Santa speaking loud", tp.getText("not.in.bundle", "this is default {0} speaking {1}", args));

        assertEquals("Hello World", tp.getText("hello", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", args));

        assertEquals(null, tp.getText("not.in.bundle", args));

        assertEquals("Hello World", tp.getText("hello", "this is default", (String[]) null));
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="155">
<file line="215" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/ActionSupportTest.java"/>
<file line="235" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/ActionSupportTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("Hello World", mas.getText("hello", "this is default", args)); // no args in bundle
        assertEquals("Hello World Santa", mas.getText("hello.0", "this is default", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", mas.getText("hello.1", "this is default", args));

        assertEquals("this is default", mas.getText("not.in.bundle", "this is default", args));
        assertEquals("this is default Santa", mas.getText("not.in.bundle", "this is default {0}", args));
        assertEquals("this is default Santa speaking loud", mas.getText("not.in.bundle", "this is default {0} speaking {1}", args));

        assertEquals("Hello World", mas.getText("hello", args)); // no args in bundle
        assertEquals("Hello World Santa", mas.getText("hello.0", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", mas.getText("hello.1", args));

        assertEquals("not.in.bundle", mas.getText("not.in.bundle", args));

        assertEquals("Hello World", mas.getText("hello", "this is default", (String[]) null));
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="152">
<file line="74" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/DefaultTextProviderTest.java"/>
<file line="72" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/TextProviderSupportTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("not.in.bundle", tp.getText("not.in.bundle", args));
    }

    public void testGetTextsWithArrayArgs() throws Exception {
        String[] args = { "Santa", "loud" };
        assertEquals("Hello World", tp.getText("hello", "this is default", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", "this is default", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", "this is default", args));

        assertEquals("this is default", tp.getText("not.in.bundle", "this is default", args));
        assertEquals("this is default Santa", tp.getText("not.in.bundle", "this is default {0}", args));
        assertEquals("this is default Santa speaking loud", tp.getText("not.in.bundle", "this is default {0} speaking {1}", args));

        assertEquals("Hello World", tp.getText("hello", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", args));

        assertEquals("not.in.bundle", tp.getText("not.in.bundle", args));
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="151">
<file line="66" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/AnnotationActionValidatorManagerTest.java"/>
<file line="124" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/ExpressionValidatorTest.java"/>
<codefragment>
<![CDATA[
        ActionConfig config = new ActionConfig.Builder("", "name", "").build();
        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
        ActionProxy proxy = EasyMock.createNiceMock(ActionProxy.class);

        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(null).anyTimes();
        EasyMock.expect(invocation.invoke()).andReturn(Action.SUCCESS).anyTimes();
        EasyMock.expect(proxy.getMethod()).andReturn("execute").anyTimes();
        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();


        EasyMock.replay(invocation);
        EasyMock.replay(proxy);

        ActionContext.getContext().setActionInvocation(invocation);
    }
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="151">
<file line="306" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/AnnotationXWorkConverterTest.java"/>
<file line="360" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        User user = new User();
        stack.push(user);

        stack.setValue("list", "asdf");
        assertNotNull(user.getList());
        assertEquals(1, user.getList().size());
        assertEquals(String.class, user.getList().get(0).getClass());
        assertEquals("asdf", user.getList().get(0));
    }

    public void testStringToCustomTypeUsingCustomConverter() {
        // the converter needs to be registered as the Bar.class converter 
        // it won't be detected from the Foo-conversion.properties
        // because the Foo-conversion.properties file is only used when converting a property of Foo
        converter.registerConverter(Bar.class.getName(), new FooBarConverter());

        Bar bar = (Bar) converter.convertValue(null, null, null, null, "blah:123", Bar.class);
        assertNotNull("conversion failed", bar);
        assertEquals(123, bar.getSomethingElse());
        assertEquals("blah", bar.getTitle());
    }

    public void testStringToCustomTypeUsingCustomConverterFromProperties() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="149">
<file line="2575" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/compiler/Generator.java"/>
<file line="2635" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/compiler/Generator.java"/>
<codefragment>
<![CDATA[
        private void restoreScriptingVars(Node.CustomTag n, int scope) {
            if (n.getCustomNestingLevel() == 0) {
                return;
            }

            TagVariableInfo[] tagVarInfos = n.getTagVariableInfos();
            VariableInfo[] varInfos = n.getVariableInfos();
            if ((varInfos.length == 0) && (tagVarInfos.length == 0)) {
                return;
            }

            if (varInfos.length > 0) {
                for (int i = 0; i < varInfos.length; i++) {
                    if (varInfos[i].getScope() != scope)
                        continue;
                    // If the scripting variable has been declared, skip codes
                    // for saving and restoring it.
                    if (n.getScriptingVars(scope).contains(varInfos[i]))
                        continue;
                    String varName = varInfos[i].getVarName();
                    String tmpVarName = "_jspx_" + varName + "_"
                            + n.getCustomNestingLevel();
                    out.printin(varName);
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="147">
<file line="129" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/result/PortletResultTest.java"/>
<file line="159" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/result/PortletResultTest.java"/>
<codefragment>
<![CDATA[
        Constraint[] params = new Constraint[]{eq(ACTION_PARAM), eq("renderDirect")};
        mockResponse.expects(once()).method("setRenderParameter").with(params);
        params = new Constraint[]{eq(MODE_PARAM), eq(PortletMode.VIEW.toString())};
        mockResponse.expects(once()).method("setRenderParameter").with(params);
        params = new Constraint[]{eq(PortletConstants.RENDER_DIRECT_NAMESPACE), eq("/test")};
        mockResponse.expects(once()).method("setRenderParameter").with(params);

        mockRequest.stubs().method("getPortletMode").will(returnValue(PortletMode.VIEW));
        mockCtx.expects(atLeastOnce()).method("getMajorVersion").will(returnValue(1));
 
        ActionContext ctx = ActionContext.getContext();
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="146">
<file line="37" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/DoubleSelectTest.java"/>
<file line="297" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/DoubleSelectTest.java"/>
<codefragment>
<![CDATA[
    private void prepareTagGeneric(DoubleSelectTag tag) {
        TestAction testAction = (TestAction) action;
        Region antwerp = new Region("Antwerp", "AN");
        Region gent = new Region("Gent", "GN");
        Region brugge = new Region("Brugge", "BRG");
        ArrayList belgiumRegions = new ArrayList();
        belgiumRegions.add(antwerp);
        belgiumRegions.add(gent);
        belgiumRegions.add(brugge);
        Country belgium = new Country("Belgium", "BE", belgiumRegions);

        Region paris = new Region("Paris", "PA");
        Region bordeaux = new Region("Bordeaux", "BOR");
        ArrayList franceRegions = new ArrayList();
        franceRegions.add(paris);
        franceRegions.add(bordeaux);
        Country france = new Country("France", "FR", franceRegions);

        Collection collection = new ArrayList(2);
        collection.add("AN");
        testAction.setCollection(collection);
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="146">
<file line="169" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java"/>
<file line="210" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java"/>
<file line="252" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java"/>
<file line="294" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java"/>
<codefragment>
<![CDATA[
    public void testInterceptSelectedCookiesNameAndValue() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setCookies(
                new Cookie("cookie1", "cookie1value"),
                new Cookie("cookie2", "cookie2value"),
                new Cookie("cookie3", "cookie3value")
        );
        ServletActionContext.setRequest(request);

        MockActionWithCookieAware action = new MockActionWithCookieAware();

        ActionContext.getContext().getValueStack().push(action);

        ActionInvocation invocation = (ActionInvocation) createMock(ActionInvocation.class);
        expect(invocation.getAction()).andReturn(action);
        expect(invocation.invoke()).andReturn(Action.SUCCESS);

        replay(invocation);

        CookieInterceptor interceptor = new CookieInterceptor();
        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());
        interceptor.setAcceptedPatternsChecker(new DefaultAcceptedPatternsChecker());
        interceptor.setCookiesName("cookie1, cookie3");
        interceptor.setCookiesValue("cookie1value");
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="145">
<file line="580" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/xmlparser/XMLEncodingDetector.java"/>
<file line="732" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/xmlparser/XMLEncodingDetector.java"/>
<codefragment>
<![CDATA[
            if (c == '\n' || (c == '\r' && external)) {
                do {
                    c = fCurrentEntity.ch[fCurrentEntity.position++];
                    if (c == '\r' && external) {
                        newlines++;
                        fCurrentEntity.lineNumber++;
                        fCurrentEntity.columnNumber = 1;
                        if (fCurrentEntity.position == fCurrentEntity.count) {
                            offset = 0;
                            fCurrentEntity.position = newlines;
                            if (load(newlines, false)) {
                                break;
                            }
                        }
                        if (fCurrentEntity.ch[fCurrentEntity.position] == '\n') {
                            fCurrentEntity.position++;
                            offset++;
                        }
                        /*** NEWLINE NORMALIZATION ***/
                        else {
                            newlines++;
                        }
                    } else if (c == '\n') {
                        newlines++;
                        fCurrentEntity.lineNumber++;
                        fCurrentEntity.columnNumber = 1;
                        if (fCurrentEntity.position == fCurrentEntity.count) {
                            offset = 0;
                            fCurrentEntity.position = newlines;
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="145">
<file line="368" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/AnnotationXWorkConverterTest.java"/>
<file line="387" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/AnnotationXWorkConverterTest.java"/>
<codefragment>
<![CDATA[
    public void testGenericPropertiesFromSetter() {
        GenericsBean gb = new GenericsBean();
        ValueStack stack = ac.getValueStack();
        stack.push(gb);

        stack.setValue("genericMap[123.12]", "66");
        stack.setValue("genericMap[456.12]", "42");

        assertEquals(2, gb.getGenericMap().size());
        assertEquals("66", stack.findValue("genericMap.get(123.12).toString()"));
        assertEquals("42", stack.findValue("genericMap.get(456.12).toString()"));
        assertEquals(66, stack.findValue("genericMap.get(123.12)"));
        assertEquals(42, stack.findValue("genericMap.get(456.12)"));
        assertEquals(true, stack.findValue("genericMap.containsValue(66)"));
        assertEquals(true, stack.findValue("genericMap.containsValue(42)"));
        assertEquals(true, stack.findValue("genericMap.containsKey(123.12)"));
        assertEquals(true, stack.findValue("genericMap.containsKey(456.12)"));
    }

    public void testGenericPropertiesFromGetter() {
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="145">
<file line="60" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/TextProviderSupportTest.java"/>
<file line="77" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/TextProviderSupportTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("Hello World", tp.getText("hello", "this is default", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", "this is default", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", "this is default", args));

        assertEquals("this is default", tp.getText("not.in.bundle", "this is default", args));
        assertEquals("this is default Santa", tp.getText("not.in.bundle", "this is default {0}", args));
        assertEquals("this is default Santa speaking loud", tp.getText("not.in.bundle", "this is default {0} speaking {1}", args));

        assertEquals("Hello World", tp.getText("hello", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", args));

        assertEquals("not.in.bundle", tp.getText("not.in.bundle", args));
    }

    public void testGetBundle() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="143">
<file line="28" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/AnnotationValidationAction.java"/>
<file line="32" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/AnnotationValidationExpAction.java"/>
<codefragment>
<![CDATA[
            fieldName = "bar", shortCircuit = true, trimExpression = "${trim}", caseSensitiveExpression = "${caseSensitive}",
            messageParams = {"one", "two", "three"})
    @ConditionalVisitorFieldValidator(expression = "foo+bar", context = "some", appendPrefix = false, fieldName = "bar",
            key = "conditional.key", message = "Foo doesn't match!", shortCircuit = true,
            messageParams = {"one", "two", "three"})
    @ConversionErrorFieldValidator(fieldName = "bar", key = "conversion.key", message = "Foo conversion error!",
            shortCircuit = true, repopulateField = true, messageParams = {"one", "three"})
    @CustomValidator(type = "myValidator", fieldName = "foo", key = "foo.invalid", message = "Foo is invalid!",
            shortCircuit = true, messageParams = {"one", "two", "three"},
            parameters = {
                    @ValidationParameter(name = "value", value = "1")
            }
    )
    @DateRangeFieldValidator(fieldName = "foo", key = "date.foo", maxExpression = "${dateMax}", minExpression = "${dateMin}", dateFormat = "yyyy",
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="143">
<file line="141" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/AnnotationXWorkConverterTest.java"/>
<file line="162" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        ModelDrivenAction action = new ModelDrivenAction();
        stack.push(action);
        stack.push(action.getModel());

        Map<String, Object> ognlStackContext = stack.getContext();
        ognlStackContext.put(XWorkConverter.REPORT_CONVERSION_ERRORS, Boolean.TRUE);

        String[] value = new String[]{"invalid date"};
        assertEquals("Conversion should have failed.", OgnlRuntime.NoConversionPossible, converter.convertValue(ognlStackContext, action, null, "birth", value, Date.class));
        stack.pop();
        stack.pop();

        Map conversionErrors = (Map) ognlStackContext.get(ActionContext.CONVERSION_ERRORS);
        assertNotNull(conversionErrors);
        assertEquals(1, conversionErrors.size());
        assertNotNull(conversionErrors.get("birth"));
        assertEquals(value, conversionErrors.get("birth"));
    }

    public void testDateStrictConversion() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="141">
<file line="602" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/compiler/Node.java"/>
<file line="688" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/compiler/Node.java"/>
<codefragment>
<![CDATA[
            super(qName, TAG_DIRECTIVE_ACTION, attrs, nonTaglibXmlnsAttrs,
                    taglibAttrs, start, parent);
            imports = new Vector();
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        /**
         * Parses the comma-separated list of class or package names in the
         * given attribute value and adds each component to this PageDirective's
         * vector of imported classes and packages.
         * 
         * @param value
         *            A comma-separated string of imports.
         */
        public void addImport(String value) {
            int start = 0;
            int index;
            while ((index = value.indexOf(',', start)) != -1) {
                imports.add(value.substring(start, index).trim());
                start = index + 1;
            }
            if (start == 0) {
                // No comma found
                imports.add(value.trim());
            } else {
                imports.add(value.substring(start).trim());
            }
        }

        public List getImports() {
            return imports;
        }
    }

    /**
     * Represents an attribute directive
     */
    public static class AttributeDirective extends Node {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="140">
<file line="85" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java"/>
<file line="128" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java"/>
<file line="169" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java"/>
<codefragment>
<![CDATA[
    public void testInterceptSelectedCookiesNameOnly1() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setCookies(
                new Cookie("cookie1", "cookie1value"),
                new Cookie("cookie2", "cookie2value"),
                new Cookie("cookie3", "cookie3value")
        );
        ServletActionContext.setRequest(request);

        MockActionWithCookieAware action = new MockActionWithCookieAware();

        ActionContext.getContext().getValueStack().push(action);

        ActionInvocation invocation = (ActionInvocation) createMock(ActionInvocation.class);
        expect(invocation.getAction()).andReturn(action);
        expect(invocation.invoke()).andReturn(Action.SUCCESS);

        replay(invocation);

        CookieInterceptor interceptor = new CookieInterceptor();
        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());
        interceptor.setAcceptedPatternsChecker(new DefaultAcceptedPatternsChecker());
        interceptor.setCookiesName("cookie1, cookie3");
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="140">
<file line="101" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/AnnotationXWorkConverterTest.java"/>
<file line="123" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        action.setBean(new TestBean());

        stack.push(action);

        Map<String, Object> ognlStackContext = stack.getContext();
        ognlStackContext.put(XWorkConverter.REPORT_CONVERSION_ERRORS, Boolean.TRUE);
        ognlStackContext.put(XWorkConverter.CONVERSION_PROPERTY_FULLNAME, "bean.birth");

        String[] value = new String[]{"invalid date"};
        assertEquals("Conversion should have failed.", OgnlRuntime.NoConversionPossible, converter.convertValue(ognlStackContext, action.getBean(), null, "birth", value, Date.class));
        stack.pop();

        Map conversionErrors = (Map) stack.getContext().get(ActionContext.CONVERSION_ERRORS);
        assertNotNull(conversionErrors);
        assertTrue(conversionErrors.size() == 1);
        assertEquals(value, conversionErrors.get("bean.birth"));
    }

    public void testFieldErrorMessageAddedWhenConversionFails() {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="139">
<file line="41" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/AstLiteralExpression.java"/>
<file line="52" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/AstString.java"/>
<codefragment>
<![CDATA[
    }

    public void setImage(String image) {
        if (image.indexOf('\\') == -1) {
            this.image = image;
            return;
        }
        int size = image.length();
        StringBuffer buf = new StringBuffer(size);
        for (int i = 0; i < size; i++) {
            char c = image.charAt(i);
            if (c == '\\' && i + 1 < size) {
                char c1 = image.charAt(i + 1);
                if (c1 == '\\' || c1 == '"' || c1 == '\'' || c1 == '#'
                        || c1 == '$') {
                    c = c1;
                    i++;
                }
            }
            buf.append(c);
        }
        this.image = buf.toString();
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="139">
<file line="35" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/StrutsMockHttpSession.java"/>
<file line="32" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/StrutsMockHttpSession.java"/>
<codefragment>
<![CDATA[
public class StrutsMockHttpSession extends MockHttpSession {

    Hashtable attributes = new Hashtable();


    public void setAttribute(String s, Object o) {
        attributes.put(s, o);
    }

    public Object getAttribute(String s) {
        return attributes.get(s);
    }

    public Enumeration getAttributeNames() {
        return attributes.keys();
    }

    public void setExpectedAttribute(String s, Object o) {
        throw new UnsupportedOperationException();
    }

    public void setExpectedRemoveAttribute(String s) {
        throw new UnsupportedOperationException();
    }

    public void removeAttribute(String s) {
        attributes.remove(s);
    }

    public void setupGetAttribute(String s, Object o) {
        throw new UnsupportedOperationException();
    }

    public void setupGetAttributeNames(Enumeration enumeration) {
        throw new UnsupportedOperationException();
    }
]]>
</codefragment>
</duplication>
<duplication lines="45" tokens="139">
<file line="207" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/AnchorTagTest.java"/>
<file line="173" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/URLTagTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("/TestAction.action?p0=z&amp;p1=a&amp;p1=b&amp;p2=d&amp;p2=e&amp;p3=f&amp;p3=g", writer.toString());
    }
    
    /**
     * To test priority of parameter passed in to url component though
     * various way, with includeParams="NONE"
     *  - current request url
     *  - tag's value attribute
     *  - tag's nested param tag
     *
     *  In this case only parameters from the tag itself is taken into account.
     *  Those from request will not count, only those in tag's value attribute
     *  and nested param tag.
     *
     * @throws Exception
     */
    public void testParametersPriorityWithIncludeParamsAsNONE() throws Exception {
        request.setQueryString("id1=urlId1&id2=urlId2&urlParam1=urlValue1&urlParam2=urlValue2");

        tag.setValue("testAction.action?id1=tagId1&id2=tagId2&tagId=tagValue");
        tag.setIncludeParams("NONE");

        ParamTag param1 = new ParamTag();
        param1.setPageContext(pageContext);
        param1.setName("param1");
        param1.setValue("%{'param1value'}");

        ParamTag param2 = new ParamTag();
        param2.setPageContext(pageContext);
        param2.setName("param2");
        param2.setValue("%{'param2value'}");

        ParamTag param3 = new ParamTag();
        param3.setPageContext(pageContext);
        param3.setName("id1");
        param3.setValue("%{'paramId1'}");


        tag.doStartTag();
        param1.doStartTag();
        param1.doEndTag();
        param2.doStartTag();
        param2.doEndTag();
        param3.doStartTag();
        param3.doEndTag();
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="138">
<file line="87" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<file line="120" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<codefragment>
<![CDATA[
        EasyMock.replay(context);

        this.conventionsService = new ConventionsServiceImpl("/WEB-INF/location");
        DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, "dispatcher,velocity,freemarker");

        ResultTypeConfig resultType = new ResultTypeConfig.Builder("dispatcher", ServletDispatcherResult.class.getName()).
                addParam("key", "value").addParam("key1", "value1").defaultResultParam("location").build();
        ResultConfig globalError = new ResultConfig.Builder("error", ServletDispatcherResult.class.getName()).
                addParam("location", "/globalError.jsp").
                build();
        PackageConfig packageConfig = new PackageConfig.Builder("package").
                namespace("/namespace").
                defaultResultType("dispatcher").
                addResultTypeConfig(resultType).
                addGlobalResultConfig(globalError).
                build();


        Map<String, ResultConfig> results = builder.build(GlobalResultOverrideAction.class, null, "action", packageConfig);
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="138">
<file line="47" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java"/>
<file line="85" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/CookieInterceptorTest.java"/>
<codefragment>
<![CDATA[
    public void testInterceptAll1() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setCookies(
                new Cookie("cookie1", "cookie1value"),
                new Cookie("cookie2", "cookie2value"),
                new Cookie("cookie3", "cookie3value")
        );
        ServletActionContext.setRequest(request);

        MockActionWithCookieAware action = new MockActionWithCookieAware();

        ActionContext.getContext().getValueStack().push(action);

        ActionInvocation invocation = (ActionInvocation) createMock(ActionInvocation.class);
        
        expect(invocation.getAction()).andReturn(action);
        expect(invocation.invoke()).andReturn(Action.SUCCESS);

        replay(invocation);

        CookieInterceptor interceptor = new CookieInterceptor();
        interceptor.setExcludedPatternsChecker(new DefaultExcludedPatternsChecker());
        interceptor.setAcceptedPatternsChecker(new DefaultAcceptedPatternsChecker());
        interceptor.setCookiesName("*");
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="138">
<file line="641" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/validator/AnnotationValidationConfigurationBuilder.java"/>
<file line="676" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/validator/AnnotationValidationConfigurationBuilder.java"/>
<codefragment>
<![CDATA[
        if (StringUtils.isNotEmpty(v.max())) {
            params.put("max", v.max());
        }
        if (StringUtils.isNotEmpty(v.maxExpression())) {
            params.put("maxExpression", v.maxExpression());
        }
        if (StringUtils.isNotEmpty(v.minExpression())) {
            params.put("minExpression", v.minExpression());
        }

        validatorFactory.lookupRegisteredValidatorType(validatorType);
        return new ValidatorConfig.Builder(validatorType)
                .addParams(params)
                .addParam("methodName", methodName)
                .shortCircuit(v.shortCircuit())
                .defaultMessage(v.message())
                .messageKey(v.key())
                .messageParams(v.messageParams())
                .build();
    }

    private ValidatorConfig processDoubleRangeFieldValidatorAnnotation(DoubleRangeFieldValidator v, String fieldName, String methodName) {
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="136">
<file line="53" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/javatemplates/src/test/java/org/apache/struts2/views/java/simple/ActionErrorTest.java"/>
<file line="53" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/javatemplates/src/test/java/org/apache/struts2/views/java/simple/ActionMessageTest.java"/>
<codefragment>
<![CDATA[
        String expected = s("<ul style='style' class='actionMessage'><li><span>this clas is bad</span></li><li><span>baaaaad</span></li></ul>");
        assertEquals(expected, output);
    }

    public void testRenderActionErrorNoErrors() {
        this.errors.clear();
        tag.evaluateParams();
        map.putAll(tag.getParameters());
        theme.renderTag(getTagName(), context);
        String output = writer.getBuffer().toString();
        assertEquals("", output);
    }

    @Override
    protected void setUp() throws Exception {
        this.errors = new ArrayList<String>();
        this.errors.add("this clas is bad");
        this.errors.add("baaaaad");

        //errors are needed to setup stack
        super.setUp();
        this.tag = new ActionError(stack, request, response);
    }

    @Override
    protected void setUpStack() {
        super.setUpStack();
        expectFind("actionMessages", this.errors);
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="136">
<file line="66" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/AnnotationActionValidatorManagerTest.java"/>
<file line="97" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/components/FormTest.java"/>
<codefragment>
<![CDATA[
        	.addInterceptor(new InterceptorMapping("validationInterceptor", validationInterceptor))
        	.build();
        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
        ActionProxy proxy = EasyMock.createNiceMock(ActionProxy.class);

        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(null).anyTimes();
        EasyMock.expect(invocation.invoke()).andReturn(Action.SUCCESS).anyTimes();
        EasyMock.expect(proxy.getMethod()).andReturn("execute").anyTimes();
        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();
        
        EasyMock.replay(invocation);
        EasyMock.replay(proxy);
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="135">
<file line="30" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/javatemplates/src/test/java/org/apache/struts2/views/java/simple/ActionErrorTest.java"/>
<file line="30" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/javatemplates/src/test/java/org/apache/struts2/views/java/simple/ActionMessageTest.java"/>
<codefragment>
<![CDATA[
public class ActionMessageTest extends AbstractTest {
    private ActionError tag;
    private List<String> errors;

    public void testRenderActionError() {
        tag.setCssClass("class");
        tag.setCssStyle("style");

        tag.evaluateParams();
        map.putAll(tag.getParameters());
        theme.renderTag(getTagName(), context);
        String output = writer.getBuffer().toString();
        String expected = s("<ul style='style' class='class'><li><span>this clas is bad</span></li><li><span>baaaaad</span></li></ul>");
        assertEquals(expected, output);
    }

    public void testRenderActionErrorWithoutCssClass() {
        tag.setCssStyle("style");

        tag.evaluateParams();
        map.putAll(tag.getParameters());
        theme.renderTag(getTagName(), context);
        String output = writer.getBuffer().toString();
        String expected = s("<ul style='style' class='actionMessage'><li><span>this clas is bad</span></li><li><span>baaaaad</span></li></ul>");
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="134">
<file line="424" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/main/java/org/apache/struts2/json/JSONInterceptor.java"/>
<file line="124" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/main/java/org/apache/struts2/json/JSONResult.java"/>
<codefragment>
<![CDATA[
    }

    /**
     * Sets a comma-delimited list of regular expressions to match properties
     * that should be excluded from the JSON output.
     *
     * @param commaDelim A comma-delimited list of regular expressions
     */
    public void setExcludeProperties(String commaDelim) {
        Set<String> excludePatterns = JSONUtil.asSet(commaDelim);
        if (excludePatterns != null) {
            this.excludeProperties = new ArrayList<>(excludePatterns.size());
            for (String pattern : excludePatterns) {
                this.excludeProperties.add(Pattern.compile(pattern));
            }
        }
    }

    /**
     * Sets a comma-delimited list of wildcard expressions to match properties
     * that should be excluded from the JSON output.
     *
     * @param commaDelim A comma-delimited list of wildcard patterns
     */
    public void setExcludeWildcards(String commaDelim) {
        Set<String> excludePatterns = JSONUtil.asSet(commaDelim);
        if (excludePatterns != null) {
            this.excludeProperties = new ArrayList<>(excludePatterns.size());
            for (String pattern : excludePatterns) {
                this.excludeProperties.add(WildcardUtil.compileWildcardPattern(pattern));
            }
        }
    }

    /**
     * @return the includeProperties
     */
    public List<Pattern> getIncludePropertiesList() {
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="134">
<file line="52" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/SortIteratorTagTest.java"/>
<file line="87" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/SortIteratorTagTest.java"/>
<codefragment>
<![CDATA[
            Iterator sortedIterator = (Iterator) stack.findValue("top");

            assertNotNull(sortedIterator);
            // 1
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(1));
            // 2
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(2));
            // 3
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(3));
            // 4
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(4));
            // 5
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(5));

            assertFalse(sortedIterator.hasNext());
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="134">
<file line="416" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/ParametersInterceptorTest.java"/>
<file line="448" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/ParametersInterceptorTest.java"/>
<codefragment>
<![CDATA[
                put("baz", "123");
                put("name", "try_1");
                put("(name)", "try_2");
                put("['name']", "try_3");
                put("['na' + 'me']", "try_4");
                put("{name}[0]", "try_5");
                put("(new string{'name'})[0]", "try_6");
                put("#{key: 'name'}.key", "try_7");
            }
        };

        HashMap<String, Object> extraContext = new HashMap<>();
        extraContext.put(ActionContext.PARAMETERS, HttpParameters.create(params).build());

        ActionProxy proxy = actionProxyFactory.createActionProxy("", MockConfigurationProvider.PARAM_INTERCEPTOR_ACTION_NAME, null, extraContext);

        ActionConfig config = configuration.getRuntimeConfiguration().getActionConfig("", MockConfigurationProvider.PARAM_INTERCEPTOR_ACTION_NAME);
        ParametersInterceptor pi = (ParametersInterceptor) config.getInterceptors().get(0).getInterceptor();
        pi.setAcceptParamNames("blah, baz");
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="134">
<file line="175" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/DefaultWorkflowInterceptorTest.java"/>
<file line="63" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/ValidationErrorAwareTest.java"/>
<codefragment>
<![CDATA[
        EasyMock.expect(action.hasErrors()).andReturn(true).anyTimes();

        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(action).anyTimes();
        EasyMock.expect(invocation.invoke()).andAnswer(new IAnswer<String>() {
            public String answer() throws Throwable {
                return result;
            }
        }).anyTimes();

        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();
        EasyMock.expect(proxy.getMethod()).andReturn("execute").anyTimes();


        EasyMock.replay(invocation);
        EasyMock.replay(action);
        EasyMock.replay(proxy);

        ActionContext contex = new ActionContext(new HashMap<String, Object>());
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="133">
<file line="43" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/AnnotationValidationAction.java"/>
<file line="48" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/AnnotationValidationExpAction.java"/>
<codefragment>
<![CDATA[
            minInclusiveExpression = "${doubleMinInclusiveExpression}", maxInclusiveExpression = "${doubleMaxInclusiveExpression}",
            fieldName = "foo", key = "double.key", message = "Foo is out of range!", shortCircuit = true,
            messageParams = {"one", "two", "three"})
    @EmailValidator(message = "Foo isn't a valid e-mail!", fieldName = "foo", key = "email.key",
            messageParams = {"one", "two", "three"}, shortCircuit = true)
    @ExpressionValidator(expression = "true", message = "Is not true!", key = "expression.key",
            messageParams = {"one", "two", "three"}, shortCircuit = true)
    @FieldExpressionValidator(expression = "true", fieldName = "foo", key = "fieldexpression.key", message = "It is not true!",
            messageParams = {"one", "two", "three"}, shortCircuit = true)
    @IntRangeFieldValidator(fieldName = "foo", key = "int.key", message = "Foo is out of range!",
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="133">
<file line="161" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/util/AnnotationUtils.java"/>
<file line="884" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/validator/AnnotationValidationConfigurationBuilder.java"/>
<codefragment>
<![CDATA[
    public String resolvePropertyName(Method method) {

        Matcher matcher = SETTER_PATTERN.matcher(method.getName());
        if (matcher.matches() && method.getParameterTypes().length == 1) {
            String raw = matcher.group(1);
            return raw.substring(0, 1).toLowerCase() + raw.substring(1);
        }

        matcher = GETTER_PATTERN.matcher(method.getName());
        if (matcher.matches() && method.getParameterTypes().length == 0) {
            String raw = matcher.group(2);
            return raw.substring(0, 1).toLowerCase() + raw.substring(1);
        }

        return null;
    }
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="132">
<file line="87" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/SortIteratorTagTest.java"/>
<file line="124" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/SortIteratorTagTest.java"/>
<codefragment>
<![CDATA[
            Iterator sortedIterator = (Iterator) pageContext.getAttribute("myId");

            assertNotNull(sortedIterator);
            // 1
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(1));
            // 2
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(2));
            // 3
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(3));
            // 4
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(4));
            // 5
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(5));

            assertFalse(sortedIterator.hasNext());
        }

        tag.doEndTag();
    }

    public void testSortWithIllegalSource() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="131">
<file line="2599" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/compiler/Generator.java"/>
<file line="2659" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/compiler/Generator.java"/>
<codefragment>
<![CDATA[
                    out.print(tmpVarName);
                    out.println(";");
                }
            } else {
                for (int i = 0; i < tagVarInfos.length; i++) {
                    if (tagVarInfos[i].getScope() != scope)
                        continue;
                    // If the scripting variable has been declared, skip codes
                    // for saving and restoring it.
                    if (n.getScriptingVars(scope).contains(tagVarInfos[i]))
                        continue;
                    String varName = tagVarInfos[i].getNameGiven();
                    if (varName == null) {
                        varName = n.getTagData().getAttributeString(
                                tagVarInfos[i].getNameFromAttribute());
                    } else if (tagVarInfos[i].getNameFromAttribute() != null) {
                        // alias
                        continue;
                    }
                    String tmpVarName = "_jspx_" + varName + "_"
                            + n.getCustomNestingLevel();
                    out.printin(varName);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="131">
<file line="295" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<file line="318" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<codefragment>
<![CDATA[
        Map<String, ResultConfig> results = builder.build(InheritedResultExtends.class, null, "result-inheritance-extends", packageConfig);
        assertEquals(1, results.size());
        assertEquals("error", results.get("error").getName());
        assertEquals(3, results.get("error").getParams().size());
        assertEquals("org.apache.struts2.result.ServletDispatcherResult", results.get("error").getClassName());
        assertEquals("/WEB-INF/location/namespace/error.jsp", results.get("error").getParams().get("location"));
        assertEquals("value", results.get("error").getParams().get("key"));
        assertEquals("value1", results.get("error").getParams().get("key1"));
        EasyMock.verify(context);
    }

     public void testClassLevelOverwriteInheritedSingleResultAnnotation() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="131">
<file line="147" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/result/StreamResultTest.java"/>
<file line="195" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/result/StreamResultTest.java"/>
<codefragment>
<![CDATA[
        result.setParse(true);
        // This time we dun use ${...}, so streamForImage will
        // be evaluated to the stack, which should reaturn an
        // InputStream object, cause there's such a property in
        // the action object itself.
        result.setInputName("streamForImage");
        result.setBufferSize(128);
        result.setContentLength(String.valueOf(contentLength));
        result.setContentDisposition("filename=\"logo.png\"");
        result.setContentType("image/jpeg");

        result.doExecute("helloworld", mai);

        assertEquals(String.valueOf(contentLength), result.getContentLength());
        assertEquals("image/jpeg", result.getContentType());
        assertEquals("streamForImage", result.getInputName());
        assertEquals(128, result.getBufferSize());
        assertEquals("filename=\"logo.png\"", result.getContentDisposition());

        assertEquals("image/jpeg", response.getContentType());
        assertEquals(contentLength, response.getContentLength());
        assertEquals("filename=\"logo.png\"", response.getHeader("Content-disposition"));
    }
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="131">
<file line="122" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/AnnotationXWorkConverterTest.java"/>
<file line="143" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        action.setDate(null);

        stack.push(action);

        Map<String, Object> ognlStackContext = stack.getContext();
        ognlStackContext.put(XWorkConverter.REPORT_CONVERSION_ERRORS, Boolean.TRUE);

        String[] value = new String[]{"invalid date"};
        assertEquals("Conversion should have failed.", OgnlRuntime.NoConversionPossible, converter.convertValue(ognlStackContext, action, null, "date", value, Date.class));
        stack.pop();

        Map conversionErrors = (Map) ognlStackContext.get(ActionContext.CONVERSION_ERRORS);
        assertNotNull(conversionErrors);
        assertEquals(1, conversionErrors.size());
        assertNotNull(conversionErrors.get("date"));
        assertEquals(value, conversionErrors.get("date"));
    }

    public void testFieldErrorMessageAddedWhenConversionFailsOnModelDriven() {
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="131">
<file line="79" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/DefaultTextProviderTest.java"/>
<file line="60" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/TextProviderSupportTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("Hello World", tp.getText("hello", "this is default", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", "this is default", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", "this is default", args));

        assertEquals("this is default", tp.getText("not.in.bundle", "this is default", args));
        assertEquals("this is default Santa", tp.getText("not.in.bundle", "this is default {0}", args));
        assertEquals("this is default Santa speaking loud", tp.getText("not.in.bundle", "this is default {0} speaking {1}", args));

        assertEquals("Hello World", tp.getText("hello", args)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", args)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", args));

        assertEquals("not.in.bundle", tp.getText("not.in.bundle", args));
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="130">
<file line="110" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/URLTagTest.java"/>
<file line="193" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/URLTagTest.java"/>
<codefragment>
<![CDATA[
        tag.setIncludeParams("NONE");

        ParamTag param1 = new ParamTag();
        param1.setPageContext(pageContext);
        param1.setName("param1");
        param1.setValue("%{'param1value'}");

        ParamTag param2 = new ParamTag();
        param2.setPageContext(pageContext);
        param2.setName("param2");
        param2.setValue("%{'param2value'}");

        ParamTag param3 = new ParamTag();
        param3.setPageContext(pageContext);
        param3.setName("id1");
        param3.setValue("%{'paramId1'}");


        tag.doStartTag();
        param1.doStartTag();
        param1.doEndTag();
        param2.doStartTag();
        param2.doEndTag();
        param3.doStartTag();
        param3.doEndTag();

        URL url = (URL) tag.getComponent();
        Map parameters = url.getParameters();
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="130">
<file line="120" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/AnchorTagTest.java"/>
<file line="107" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/URLTagTest.java"/>
<codefragment>
<![CDATA[
    public void testParametersPriority() throws Exception {
        request.setQueryString("id1=urlId1&id2=urlId2&urlParam1=urlValue1&urlParam2=urlValue2");

        tag.setValue("testAction.action?id1=tagId1&id2=tagId2&tagId=tagValue");

        ParamTag param1 = new ParamTag();
        param1.setPageContext(pageContext);
        param1.setName("param1");
        param1.setValue("%{'param1value'}");

        ParamTag param2 = new ParamTag();
        param2.setPageContext(pageContext);
        param2.setName("param2");
        param2.setValue("%{'param2value'}");

        ParamTag param3 = new ParamTag();
        param3.setPageContext(pageContext);
        param3.setName("id1");
        param3.setValue("%{'paramId1'}");


        tag.doStartTag();
        param1.doStartTag();
        param1.doEndTag();
        param2.doStartTag();
        param2.doEndTag();
        param3.doStartTag();
        param3.doEndTag();
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="130">
<file line="269" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/FileUploadInterceptorTest.java"/>
<file line="374" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/FileUploadInterceptorTest.java"/>
<codefragment>
<![CDATA[
    public void testMultipartRequestLocalizedError() throws Exception {
        MockHttpServletRequest req = new MockHttpServletRequest();
        req.setCharacterEncoding("text/html");
        req.addHeader("Content-type", "multipart/form-data; boundary=---1234");

        // inspired by the unit tests for jakarta commons fileupload
        String content = ("-----1234\r\n" +
                "Content-Disposition: form-data; name=\"file\"; filename=\"deleteme.txt\"\r\n" +
                "Content-Type: text/html\r\n" +
                "\r\n" +
                "Unit test of FileUploadInterceptor" +
                "\r\n" +
                "-----1234--\r\n");
        req.setContent(content.getBytes("US-ASCII"));

        MyFileupAction action = new MyFileupAction();

        MockActionInvocation mai = new MockActionInvocation();
        mai.setAction(action);
        mai.setResultCode("success");
        mai.setInvocationContext(ActionContext.getContext());
        Map<String, Object> param = new HashMap<>();
        ActionContext.getContext().setParameters(HttpParameters.create(param).build());
        // set German locale
        ActionContext.getContext().setLocale(Locale.GERMAN);
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="129">
<file line="480" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<file line="515" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("org.apache.struts2.result.ServletDispatcherResult", results.get("input").getClassName());
        assertEquals(3, results.get("failure").getParams().size());
        assertEquals("/WEB-INF/location/namespace/action-failure.jsp", results.get("failure").getParams().get("location"));
        assertEquals("org.apache.struts2.result.ServletDispatcherResult", results.get("failure").getClassName());
        assertEquals(3, results.get("success").getParams().size());
        assertEquals("/WEB-INF/location/namespace/action-success.jsp", results.get("success").getParams().get("location"));
        assertEquals("org.apache.struts2.result.ServletDispatcherResult", results.get("success").getClassName());
        EasyMock.verify(context);
    }

    public void testActionLevelMultipleResultNamesAnnotationNoName() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="129">
<file line="366" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<file line="467" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<codefragment>
<![CDATA[
        Map<String, ResultConfig> results = builder.build(ActionLevelResultsAction.class, getAnnotation(ActionLevelResultsAction.class, "execute", Action.class), "action-level-results", packageConfig);
        assertEquals(4, results.size());
        assertEquals("error", results.get("error").getName());
        assertEquals("input", results.get("input").getName());
        assertEquals("success", results.get("success").getName());
        assertEquals("failure", results.get("failure").getName());
        assertEquals(3, results.get("error").getParams().size());
        assertEquals("org.apache.struts2.result.ServletDispatcherResult", results.get("error").getClassName());
        assertEquals("/WEB-INF/location/namespace/error.jsp", results.get("error").getParams().get("location"));
        assertEquals("value", results.get("success").getParams().get("key"));
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="127">
<file line="86" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/main/java/org/apache/struts2/portlet/PortletApplicationMap.java"/>
<file line="77" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/main/java/org/apache/struts2/portlet/PortletRequestMap.java"/>
<codefragment>
<![CDATA[
                        Entry entry = (Entry) obj;

                        return ((key == null) ? (entry.getKey() == null) : key
                                .equals(entry.getKey()))
                                && ((value == null) ? (entry.getValue() == null)
                                        : value.equals(entry.getValue()));
                    }

                    public int hashCode() {
                        return ((key == null) ? 0 : key.hashCode())
                                ^ ((value == null) ? 0 : value.hashCode());
                    }

                    public String getKey() {
                        return key;
                    }

                    public Object getValue() {
                        return value;
                    }

                    public Object setValue(Object obj) {
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="127">
<file line="65" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java"/>
<file line="138" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java"/>
<file line="348" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/OptionTransferSelectTagTest.java"/>
<codefragment>
<![CDATA[
        tag.setDoubleEmptyOption("false");

        tag.setAllowAddAllToLeft("true");
        tag.setAllowAddAllToRight("true");
        tag.setAllowAddToLeft("true");
        tag.setAllowAddToRight("true");
        tag.setAllowSelectAll("true");

        tag.setAddAllToLeftLabel("All Left");
        tag.setAddAllToRightLabel("All Right");
        tag.setAddToLeftLabel("Left");
        tag.setAddToRightLabel("Right");
        tag.setSelectAllLabel("Select All");

        tag.setLeftTitle("Title Left");
        tag.setRightTitle("Title Right");

        tag.setButtonCssClass("buttonCssClass");
        tag.setButtonCssStyle("buttonCssStyle");

        tag.setHeaderKey("Header Key");
        tag.setHeaderValue("Header Value");

        tag.setDoubleHeaderKey("Double Header Key");
        tag.setDoubleHeaderValue("Double Header Value");

        tag.doStartTag();
        tag.doEndTag();

        //System.out.println(writer.toString());
        verify(OptionTransferSelectTagTest.class.getResource("optiontransferselect-5.txt"));
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="127">
<file line="86" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/dispatcher/ApplicationMap.java"/>
<file line="84" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/dispatcher/RequestMap.java"/>
<codefragment>
<![CDATA[
                        Entry entry = (Entry) obj;

                        return ((key == null) ? (entry.getKey() == null) : key.equals(entry.getKey())) && ((value == null) ? (entry.getValue() == null) : value.equals(entry.getValue()));
                    }

                    public int hashCode() {
                        return ((key == null) ? 0 : key.hashCode()) ^ ((value == null) ? 0 : value.hashCode());
                    }

                    public Object getKey() {
                        return key;
                    }

                    public Object getValue() {
                        return value;
                    }

                    public Object setValue(Object obj) {
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="127">
<file line="608" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/validator/AnnotationValidationConfigurationBuilder.java"/>
<file line="774" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/validator/AnnotationValidationConfigurationBuilder.java"/>
<codefragment>
<![CDATA[
        Map<String, Object> params = new HashMap<>();

        if (fieldName != null) {
            params.put("fieldName", fieldName);
        } else if (StringUtils.isNotEmpty(v.fieldName())) {
            params.put("fieldName", v.fieldName());
        }

        validatorFactory.lookupRegisteredValidatorType(validatorType);
        return new ValidatorConfig.Builder(validatorType)
                .addParams(params)
                .addParam("methodName", methodName)
                .shortCircuit(v.shortCircuit())
                .defaultMessage(v.message())
                .messageKey(v.key())
                .messageParams(v.messageParams())
                .build();
    }

    private ValidatorConfig processDateRangeFieldValidatorAnnotation(DateRangeFieldValidator v, String fieldName, String methodName) {
]]>
</codefragment>
</duplication>
<duplication lines="66" tokens="127">
<file line="163" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/interceptor/ParameterFilterInterceptor.java"/>
<file line="182" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/main/java/org/apache/struts2/json/JSONCleaner.java"/>
<codefragment>
<![CDATA[
    }

    /**
     * @return value of defaultBlock
     */
    public boolean isDefaultBlock() {
        return defaultBlock;
    }

    /**
     * @param defaultExclude The defaultExclude to set.
     */
    public void setDefaultBlock(boolean defaultExclude) {
        this.defaultBlock = defaultExclude;
    }

    /**
     * @return list of blocked wildcard patterns
     */
    public Collection<String> getBlockedCollection() {
        return blocked;
    }

    /**
     * @param blocked The blocked to set.
     */
    public void setBlockedCollection(Collection<String> blocked) {
        this.blocked = blocked;
    }

    /**
     * @param blocked The blocked parameters as comma separated String.
     */
    public void setBlocked(String blocked) {
        setBlockedCollection(asCollection(blocked));
    }

    /**
     * @return list of allowed wildcard patterns
     */
    public Collection<String> getAllowedCollection() {
        return allowed;
    }

    /**
     * @param allowed The allowed to set.
     */
    public void setAllowedCollection(Collection<String> allowed) {
        this.allowed = allowed;
    }

    /**
     * @param allowed The allowed paramters as comma separated String.
     */
    public void setAllowed(String allowed) {
        setAllowedCollection(asCollection(allowed));
    }

    /**
     * Return a collection from the comma delimited String.
     *
     * @param commaDelim the comma delimited String.
     * @return A collection from the comma delimited String. Returns <tt>null</tt> if the string is empty.
     */
    private Collection<String> asCollection(String commaDelim) {
        if (commaDelim == null || commaDelim.trim().length() == 0) {
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="126">
<file line="443" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/SelectTest.java"/>
<file line="477" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/SelectTest.java"/>
<codefragment>
<![CDATA[
    public void testSimpleIntegerWithValueWorkaround() throws Exception {
        TestAction testAction = (TestAction) action;

        IdName hello = new IdName(new Integer(1), "hello");
        IdName world = new IdName(new Integer(2), "world");
        List list2 = new ArrayList();
        list2.add(hello);
        list2.add(world);
        testAction.setList2(list2);

        testAction.setFooInt(new Integer(1));

        SelectTag tag = new SelectTag();
        tag.setPageContext(pageContext);
        tag.setEmptyOption("true");
        tag.setLabel("mylabel");
        tag.setName("fooInt");
        tag.setList("list2");
        tag.setListKey("id");
        tag.setListValue("name");
        tag.setValue("fooInt");
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="126">
<file line="41" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/RegexFieldValidatorTest.java"/>
<file line="140" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/RegexFieldValidatorTest.java"/>
<codefragment>
<![CDATA[
        testPerson.setUsername("");

        ValueStack stack = ActionContext.getContext().getValueStack();
        ActionContext.getContext().setValueStack(stack);

        RegexFieldValidator validator = new RegexFieldValidator();
        validator.setRegex("^Sec.*");
        validator.setValidatorContext(new GenericValidatorContext(new Object()));
        validator.setFieldName("username");
        validator.setValueStack(ActionContext.getContext().getValueStack());
        validator.validate(testPerson);

        assertFalse(validator.getValidatorContext().hasErrors());
        assertFalse(validator.getValidatorContext().hasActionErrors());
        assertFalse(validator.getValidatorContext().hasActionMessages());
        assertFalse(validator.getValidatorContext().hasFieldErrors());
    }

    public void testNoStringField() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="124">
<file line="51" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/JSONEnumTest.java"/>
<file line="48" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/JSONUtilTest.java"/>
<codefragment>
<![CDATA[
        String json = JSONUtil.serialize(bean1, JSONUtil.CACHE_BEAN_INFO_DEFAULT);

        Map result = (Map) JSONUtil.deserialize(json);
        assertEquals("str", result.get("stringField"));
        assertEquals(true, result.get("booleanField"));
        assertEquals("s", result.get("charField")); // note: this is a
                                                            // String
        assertEquals(10.1, result.get("doubleField"));
        assertEquals(1.5, result.get("floatField")); // note: this is a
                                                            // Double
        assertEquals(10L, result.get("intField")); // note: this is a
                                                            // Long
        assertEquals(AnEnum.ValueA, AnEnum.valueOf((String) result.get("enumField"))); // note:
                                                                                        // this
                                                                                        // is a
                                                                                        // String
        assertEquals(AnEnumBean.Two, AnEnumBean.valueOf((String) result.get("enumBean"))); // note:
                                                                                            // this
                                                                                            // is a
                                                                                            // String
    }

    public void testSerializeListOfList() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="124">
<file line="52" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/JSONCleanerTest.java"/>
<file line="87" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/JSONCleanerTest.java"/>
<codefragment>
<![CDATA[
		cleaner.setBlocked("b,d.y");

		Map data = getData();
		cleaner.clean("", data);
		assertEquals(3, data.size());
		assertEquals("x", data.get("a"));
		assertNull(data.get("b"));
		assertNotNull(data.get("c"));
		assertNotNull(data.get("d"));
		assertEquals(1, ((Map) data.get("d")).size());
		assertEquals("a", ((Map) data.get("d")).get("x"));
		assertNull(((Map) data.get("d")).get("y"));

	}
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="124">
<file line="47" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/util/tomcat/buf/Utf8Decoder.java"/>
<file line="1115" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParserTokenManager.java"/>
<codefragment>
<![CDATA[
            -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1,
]]>
</codefragment>
</duplication>
<duplication lines="61" tokens="124">
<file line="164" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/result/VelocityResult.java"/>
<file line="193" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/main/java/org/apache/struts2/portlet/result/PortletVelocityResult.java"/>
<codefragment>
<![CDATA[
            LOG.error("Unable to render Velocity Template, '" + finalLocation + "'", e);
            throw e;
        } finally {
            if (usedJspFactory) {
                jspFactory.releasePageContext(pageContext);
            }
        }
    }

    /**
     * Retrieve the content type for this template. <br>People can override
     * this method if they want to provide specific content types for specific
     * templates (eg text/xml).
     *
     * @param templateLocation location of templates
     *
     * @return The content type associated with this template (default
     *         "text/html")
     */
    protected String getContentType(String templateLocation) {
        return "text/html";
    }

    /**
     * Retrieve the encoding for this template. <br>People can override this
     * method if they want to provide specific encodings for specific templates.
     *
     * @param templateLocation location of templates
     *
     * @return The encoding associated with this template (defaults to the value
     *         of 'struts.i18n.encoding' property)
     */
    protected String getEncoding(String templateLocation) {
        String encoding = defaultEncoding;
        if (encoding == null) {
            encoding = System.getProperty("file.encoding");
        }
        if (encoding == null) {
            encoding = "UTF-8";
        }
        return encoding;
    }

    /**
     * Given a value stack, a Velocity engine, and an action invocation, this
     * method returns the appropriate Velocity template to render.
     *
     * @param stack the value stack to resolve the location again (when parse
     *        equals true)
     * @param velocity the velocity engine to process the request against
     * @param invocation an encapsulation of the action execution state.
     * @param location the location of the template
     * @param encoding the charset encoding of the template
     * @return the template to render
     * @throws Exception when the requested template could not be found
     */
    protected Template getTemplate(ValueStack stack, VelocityEngine velocity, ActionInvocation invocation,
                                   String location, String encoding) throws Exception {
        if (!location.startsWith("/")) {
            location = invocation.getProxy().getNamespace() + "/" + location;
        }
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="123">
<file line="52" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/SortIteratorTagTest.java"/>
<file line="124" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/SortIteratorTagTest.java"/>
<codefragment>
<![CDATA[
            Iterator sortedIterator = (Iterator) pageContext.getAttribute("myId");

            assertNotNull(sortedIterator);
            // 1
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(1));
            // 2
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(2));
            // 3
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(3));
            // 4
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(4));
            // 5
            assertTrue(sortedIterator.hasNext());
            assertEquals(sortedIterator.next(), new Integer(5));

            assertFalse(sortedIterator.hasNext());
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="121">
<file line="175" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/tagplugins/jstl/core/Import.java"/>
<file line="307" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/tagplugins/jstl/core/Import.java"/>
<codefragment>
<![CDATA[
            ctxt.generateJavaSource("    " + tempStringName + " = " +sbName + ".toString();");
            
            ctxt.generateJavaSource("}else{");
            
            //if the url is relative, http request is needed.
            ctxt.generateJavaSource("    if (!(pageContext.getRequest() instanceof HttpServletRequest  " +
            "&& pageContext.getResponse() instanceof HttpServletResponse)){");
            ctxt.generateJavaSource("        throw new JspTagException(\"Relative &lt;import&gt; from non-HTTP request not allowed\");");
            ctxt.generateJavaSource("    }");
            
            //get the servlet context of the context defined in the context attribute
            ctxt.generateJavaSource("    ServletContext " + servletContextName + " = null;");
            if(hasContext){
                ctxt.generateJavaSource("    if(null != " + contextName + "){");
                ctxt.generateJavaSource("        " + servletContextName + " = pageContext.getServletContext().getContext(" + contextName + ");" );
                ctxt.generateJavaSource("    }else{");
                ctxt.generateJavaSource("        " + servletContextName + " = pageContext.getServletContext();");
                ctxt.generateJavaSource("    }");
            }else{
                ctxt.generateJavaSource("    " + servletContextName + " = pageContext.getServletContext();");
            }
            
            //
            ctxt.generateJavaSource("    if(" + servletContextName + " == null){");
            if(hasContext){
                ctxt.generateJavaSource("        throw new JspTagException(\"Unable to get RequestDispatcher for Context: \\\" \" +" + contextName + "+ \" \\\" and URL: \\\" \" +" + urlName + "+ \" \\\". Verify values and/or enable cross context access.\");");
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="121">
<file line="2078" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/compiler/Generator.java"/>
<file line="2123" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/compiler/Generator.java"/>
<codefragment>
<![CDATA[
            out.popIndent();

            // Store varReader in appropriate scope
            if (varReaderAttr != null || varAttr != null) {
                String scopeName = n.getTextAttribute("scope");
                out.printin("_jspx_page_context.setAttribute(");
                if (varReaderAttr != null) {
                    out.print(quote(varReaderAttr));
                    out
                            .print(", new java.io.StringReader(_jspx_sout.toString())");
                } else {
                    out.print(quote(varAttr));
                    out.print(", _jspx_sout.toString()");
                }
                if (scopeName != null) {
                    out.print(", ");
                    out.print(getScopeConstant(scopeName));
                }
                out.println(");");
            }

            // Restore EL context
            out.printil("jspContext.getELContext().putContext(JspContext.class,getJspContext());");

            n.setEndJavaLine(out.getJavaLine());
        }

        public void visit(Node.AttributeGenerator n) throws JasperException {
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="121">
<file line="376" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<file line="477" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("value1", results.get("success").getParams().get("key1"));
        assertEquals(1, results.get("input").getParams().size());
        assertEquals("foo.action", results.get("input").getParams().get("actionName"));
        assertEquals("org.apache.struts2.result.ServletActionRedirectResult", results.get("input").getClassName());
        assertEquals(3, results.get("failure").getParams().size());
        assertEquals("/WEB-INF/location/namespace/action-failure.jsp", results.get("failure").getParams().get("location"));
        assertEquals("org.apache.struts2.result.ServletDispatcherResult", results.get("failure").getClassName());
        assertEquals(3, results.get("success").getParams().size());
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="121">
<file line="117" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/util/finder/ClassFinder.java"/>
<file line="412" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/main/java/org/apache/struts2/convention/DefaultClassFinder.java"/>
<codefragment>
<![CDATA[
    }

    public class PackageInfo extends Annotatable implements Info {
        private final String name;
        private final ClassInfo info;
        private final Package pkg;

        public PackageInfo(Package pkg){
            super(pkg);
            this.pkg = pkg;
            this.name = pkg.getName();
            this.info = null;
        }

        public PackageInfo(String name, ClassFinder classFinder) {
            info = new ClassInfo(name, null, classFinder);
            this.name = name;
            this.pkg = null;
        }

        public String getName() {
            return name;
        }

        public Package get() throws ClassNotFoundException {
            return (pkg != null)?pkg:info.get().getPackage();
        }
    }
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="120">
<file line="123" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/AnchorTagTest.java"/>
<file line="231" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/AnchorTagTest.java"/>
<codefragment>
<![CDATA[
        tag.setIncludeParams("NONE");

        ParamTag param1 = new ParamTag();
        param1.setPageContext(pageContext);
        param1.setName("param1");
        param1.setValue("%{'param1value'}");

        ParamTag param2 = new ParamTag();
        param2.setPageContext(pageContext);
        param2.setName("param2");
        param2.setValue("%{'param2value'}");

        ParamTag param3 = new ParamTag();
        param3.setPageContext(pageContext);
        param3.setName("id1");
        param3.setValue("%{'paramId1'}");


        tag.doStartTag();
        param1.doStartTag();
        param1.doEndTag();
        param2.doStartTag();
        param2.doEndTag();
        param3.doStartTag();
        param3.doEndTag();
        tag.doEndTag();

        assertEquals(wrapWithAnchor("testAction.action?id1=paramId1&amp;id2=tagId2&amp;tagId=tagValue&amp;param1=param1value&amp;param2=param2value"), writer.toString());
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="120">
<file line="479" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/ParametersInterceptorTest.java"/>
<file line="495" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/ParametersInterceptorTest.java"/>
<codefragment>
<![CDATA[
        params.put("theSemiProtectedMap.foo", "This is blah");
        params.put("theProtectedMap.boo", "This is blah");

        HashMap<String, Object> extraContext = new HashMap<>();
        extraContext.put(ActionContext.PARAMETERS, HttpParameters.create(params).build());

        ActionProxy proxy = actionProxyFactory.createActionProxy("", MockConfigurationProvider.PARAM_INTERCEPTOR_ACTION_NAME, null, extraContext);
        proxy.execute();
        SimpleAction action = (SimpleAction) proxy.getAction();
        assertEquals(1, action.getTheProtectedMap().size());
        assertNotNull(action.getTheProtectedMap().get("boo"));
        assertNull(action.getTheProtectedMap().get("foo"));
    }

    /**
     * This test demonstrates a vulnerability which allows to execute arbitrary code.
     * For further details and explanations see https://cwiki.apache.org/confluence/display/WW/S2-009
     *
     * @throws Exception
     */
    public void testEvalExpressionAsParameterName() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="120">
<file line="33" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/apps/showcase/src/main/java/org/apache/struts2/showcase/tag/nonui/iteratortag/AppendIteratorTagDemo.java"/>
<file line="33" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/apps/showcase/src/main/java/org/apache/struts2/showcase/tag/nonui/iteratortag/MergeIteratorTagDemo.java"/>
<codefragment>
<![CDATA[
	private String iteratorValue1;
	private String iteratorValue2;


	public void validate() {
		if (iteratorValue1 == null || iteratorValue1.trim().length() <= 0) {
			addFieldError("iteratorValue1", "iterator value 1 cannot be empty");
		} else if (iteratorValue1.trim().indexOf(",") <= 0) {
			addFieldError("iteratorValue1", "iterator value 1 needs to be comma separated");
		}
		if (iteratorValue2 == null || iteratorValue2.trim().length() <= 0) {
			addFieldError("iteratorValue2", "iterator value 2 cannot be empty");
		} else if (iteratorValue2.trim().indexOf(",") <= 0) {
			addFieldError("iteratorValue2", "iterator value 2 needs to be comma separated");
		}
	}


	public String getIteratorValue1() {
		return this.iteratorValue1;
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="119">
<file line="91" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/interceptor/PortletStateInterceptorTest.java"/>
<file line="132" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/interceptor/PortletStateInterceptorTest.java"/>
<codefragment>
<![CDATA[
		EasyMock.expect(invocation.getStack()).andStubReturn(currentStack);
		
		Map<String, Object> ctxMap = new HashMap<String, Object>();
		Map<String, Object> session = new HashMap<String, Object>();
		
		session.put(STACK_FROM_EVENT_PHASE, eventPhaseStack);
		
		ctxMap.put(PHASE, PortletPhase.RENDER_PHASE);
		ctxMap.put(REQUEST, renderRequest);
		
		ActionContext ctx = new ActionContext(ctxMap);
		ctx.setSession(session);
		
		EasyMock.expect(invocation.getInvocationContext()).andStubReturn(ctx);
		EasyMock.expect(invocation.getStack()).andStubReturn(currentStack);
		EasyMock.expect(invocation.getAction()).andStubReturn(new DirectRenderFromEventAction());
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="119">
<file line="285" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/FormTagTest.java"/>
<file line="317" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/FormTagTest.java"/>
<codefragment>
<![CDATA[
    public void testFormWithCustomOnsubmitEnabledWithValidateEnabled4() throws Exception {
        prepareMockInvocation();

        FormTag tag = new FormTag();
        tag.setPageContext(pageContext);
        tag.setName("myForm");
        tag.setMethod("post");
        tag.setAction("doubleValidationAction");
        tag.setAcceptcharset("UTF-8");
        tag.setEnctype("myEncType");
        tag.setTitle("mytitle");
        tag.setOnsubmit("submitMe()");
        tag.setValidate("true");
        tag.setNamespace("");

        UpDownSelectTag t = new UpDownSelectTag();
        t.setPageContext(pageContext);
        t.setName("myUpDownSelectTag");
        t.setList("{}");

        tag.doStartTag();
        tag.getComponent().getParameters().put("actionClass", DoubleValidationAction.class);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="119">
<file line="80" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/CheckboxListTest.java"/>
<file line="106" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/CheckboxListTest.java"/>
<codefragment>
<![CDATA[
    public void testMultipleWithDisabledOn() throws Exception {
        TestAction testAction = (TestAction) action;
        Collection<String> collection = new ArrayList<String>(2);
        collection.add("hello");
        collection.add("foo");
        testAction.setCollection(collection);
        testAction.setList(new String[][]{
                {"hello", "world"},
                {"foo", "bar"},
                {"cat", "dog"}
        });

        CheckboxListTag tag = new CheckboxListTag();
        tag.setPageContext(pageContext);
        tag.setLabel("mylabel");
        tag.setName("collection");
        tag.setList("list");
        tag.setListKey("top[0]");
        tag.setListValue("top[1]");
        tag.setDisabled("true");
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="119">
<file line="78" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/IteratorGeneratorTagTest.java"/>
<file line="172" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/IteratorGeneratorTagTest.java"/>
<codefragment>
<![CDATA[
        tag.setCount("myCount");
        tag.doStartTag();
        Object topOfStack = stack.findValue("top");
        tag.doEndTag();
        Object afterTopOfStack = stack.findValue("top");


        assertTrue(topOfStack instanceof Iterator);
        // 1
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "aaa");
        // 2
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "bbb");
        // 3.
        assertTrue(((Iterator)topOfStack).hasNext());
        assertEquals(((Iterator)topOfStack).next(), "ccc");
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="118">
<file line="10" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/security/DefaultAcceptedPatternsCheckerTest.java"/>
<file line="11" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/security/DefaultExcludedPatternsCheckerTest.java"/>
<codefragment>
<![CDATA[
    public void testHardcodedPatterns() throws Exception {
        // given
        List<String> params = new ArrayList<String>() {
            {
                add("%{#application['test']}");
                add("%{#application.test}");
                add("%{#Application['test']}");
                add("%{#Application.test}");
                add("%{#session['test']}");
                add("%{#session.test}");
                add("%{#Session['test']}");
                add("%{#Session.test}");
                add("%{#struts['test']}");
                add("%{#struts.test}");
                add("%{#Struts['test']}");
                add("%{#Struts.test}");
                add("%{#request['test']}");
                add("%{#request.test}");
                add("%{#Request['test']}");
                add("%{#Request.test}");
                add("%{#servletRequest['test']}");
                add("%{#servletRequest.test}");
                add("%{#ServletRequest['test']}");
                add("%{#ServletRequest.test}");
                add("%{#servletResponse['test']}");
                add("%{#servletResponse.test}");
                add("%{#ServletResponse['test']}");
                add("%{#ServletResponse.test}");
                add("%{#servletContext['test']}");
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="118">
<file line="45" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/annotations/AnnotationParameterFilterInterceptorTest.java"/>
<file line="83" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/annotations/AnnotationParameterFilterInterceptorTest.java"/>
<codefragment>
<![CDATA[
		Action action = new AllowingByDefaultAction();
		stack.push(action);
		
		Mock mockInvocation = new Mock(ActionInvocation.class);
		mockInvocation.expectAndReturn("getInvocationContext", new ActionContext(contextMap));
		mockInvocation.matchAndReturn("getAction", action);
		mockInvocation.matchAndReturn("getStack", stack);
		mockInvocation.expectAndReturn("invoke", Action.SUCCESS);
		mockInvocation.expectAndReturn("getInvocationContext", new ActionContext(contextMap));
		mockInvocation.expectAndReturn("getInvocationContext", new ActionContext(contextMap));

		ActionInvocation invocation = (ActionInvocation) mockInvocation.proxy();
		
		AnnotationParameterFilterInterceptor interceptor = new AnnotationParameterFilterInterceptor();
		interceptor.intercept(invocation);

		HttpParameters parameters = invocation.getInvocationContext().getParameters();
		assertEquals("Paramwter map should contain one entry", 1, parameters.keySet().size());
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="118">
<file line="125" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/ParametersInterceptorTest.java"/>
<file line="287" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/ParametersInterceptorTest.java"/>
<codefragment>
<![CDATA[
        final Map<String, Boolean> excluded = new HashMap<String, Boolean>();
        ParametersInterceptor pi = new ParametersInterceptor() {

            @Override
            protected boolean isExcluded(String paramName) {
                boolean result = super.isExcluded(paramName);
                excluded.put(paramName, result);
                return result;
            }

        };

        container.inject(pi);
        ValueStack vs = ActionContext.getContext().getValueStack();

        // when
        ValidateAction action = new ValidateAction();
        pi.setParameters(action, vs, HttpParameters.create(params).build());

        // then
        assertEquals(0, action.getActionMessages().size());
        assertTrue(excluded.get(pollution1));
        assertTrue(excluded.get(pollution2));
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="117">
<file line="40" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/OtherBean.java"/>
<file line="108" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/WrapperClassBean.java"/>
<codefragment>
<![CDATA[
    }

    public Byte getByteField() {
        return byteField;
    }

    public void setByteField(Byte byteField) {
        this.byteField = byteField;
    }

    public Character getCharField() {
        return charField;
    }

    public void setCharField(Character charField) {
        this.charField = charField;
    }

    public Double getDoubleField() {
        return doubleField;
    }

    public void setDoubleField(Double doubleField) {
        this.doubleField = doubleField;
    }

    public Float getFloatField() {
        return floatField;
    }

    public void setFloatField(Float floatField) {
        this.floatField = floatField;
    }

    public Integer getIntField() {
        return intField;
    }

    public void setIntField(Integer intField) {
        this.intField = intField;
    }

    public int getNullIntField() {
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="116">
<file line="555" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/ParametersInterceptorTest.java"/>
<file line="574" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/ParametersInterceptorTest.java"/>
<codefragment>
<![CDATA[
                new MockConfigurationProvider(Collections.singletonMap("devMode", "false")));
        Map<String, Object> params = new HashMap<>();
        params.put("not_a_property", "There is no action property named like this");

        HashMap<String, Object> extraContext = new HashMap<>();
        extraContext.put(ActionContext.PARAMETERS, HttpParameters.create(params).build());

        ActionConfig config = configuration.getRuntimeConfiguration().getActionConfig("", MockConfigurationProvider.PARAM_INTERCEPTOR_ACTION_NAME);
        container.inject(config.getInterceptors().get(0).getInterceptor());
        ActionProxy proxy = actionProxyFactory.createActionProxy("", MockConfigurationProvider.PARAM_INTERCEPTOR_ACTION_NAME, null, extraContext);
        proxy.execute();
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="115">
<file line="106" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/dispatcher/Jsr168DispatcherTest.java"/>
<file line="168" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/dispatcher/Jsr286DispatcherTest.java"/>
<codefragment>
<![CDATA[
	}
	
	public void testParseConfigWithBang() {
		
		MockPortletContext portletContext = new MockPortletContext();
		MockPortletConfig portletConfig = new MockPortletConfig(portletContext);

		portletConfig.addInitParameter("viewNamespace", "/view");
		portletConfig.addInitParameter("defaultViewAction", "index!input");

		Map<PortletMode, ActionMapping> actionMap = new HashMap<PortletMode, ActionMapping>();

		dispatcher.parseModeConfig(actionMap, portletConfig, PortletMode.VIEW,
				"viewNamespace", "defaultViewAction");

		ActionMapping mapping = actionMap.get(PortletMode.VIEW);
		assertEquals("index", mapping.getName());
		assertEquals("/view", mapping.getNamespace());
		assertEquals("input", mapping.getMethod());
	}

	public void setUp() {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="115">
<file line="117" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/AbstractTagTest.java"/>
<file line="554" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/URLTagTest.java"/>
<codefragment>
<![CDATA[
        mockContainer = new Mock(Container.class);

        session = new SessionMap(request);
        Map<String, Object> extraContext = du.createContextMap(new RequestMap(request),
                HttpParameters.create(request.getParameterMap()).build(),
                session,
                new ApplicationMap(pageContext.getServletContext()),
                request,
                response);
        // let's not set the locale -- there is a test that checks if Dispatcher actually picks this up...
        // ... but generally we want to just use no locale (let it stay system default)
        extraContext.remove(ActionContext.LOCALE);
        stack.getContext().putAll(extraContext);

        context.put(ServletActionContext.HTTP_REQUEST, request);
        context.put(ServletActionContext.HTTP_RESPONSE, response);
        context.put(ServletActionContext.SERVLET_CONTEXT, servletContext);

        ActionContext.setContext(new ActionContext(context));
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="114">
<file line="334" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/servlet/JspServletWrapper.java"/>
<file line="395" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/servlet/JspServletWrapper.java"/>
<codefragment>
<![CDATA[
            }
        } catch (ServletException ex) {
            if(options.getDevelopment()) {
                throw handleJspException(ex);
            } else {
                throw ex;
            }
        } catch (IOException ex) {
            if(options.getDevelopment()) {
                throw handleJspException(ex);
            } else {
                throw ex;
            }
        } catch (IllegalStateException ex) {
            if(options.getDevelopment()) {
                throw handleJspException(ex);
            } else {
                throw ex;
            }
        } catch (Exception ex) {
            if(options.getDevelopment()) {
                throw handleJspException(ex);
            } else {
                throw new JasperException(ex);
            }
        }
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="114">
<file line="142" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/MessageStorePreResultListenerTest.java"/>
<file line="221" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/MessageStorePreResultListenerTest.java"/>
<codefragment>
<![CDATA[
        EasyMock.expectLastCall().andReturn(action);

        mockActionInvocation.getProxy();
        MockActionProxy actionProxy = new MockActionProxy();
        ResultConfig resultConfig = new ResultConfig.Builder(Action.SUCCESS, ServletRedirectResult.class.getName()).build();
        ActionConfig actionConfig = new ActionConfig.Builder("", "test", action.getClass().getName()).addResultConfig(resultConfig).build();
        actionProxy.setConfig(actionConfig);
        EasyMock.expectLastCall().andReturn(actionProxy);
        EasyMock.expectLastCall().anyTimes();

        EasyMock.replay(mockActionInvocation);

        interceptor.init();
        listener.beforeResult(mockActionInvocation, Action.SUCCESS);
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="114">
<file line="189" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/AnnotationXWorkConverterTest.java"/>
<file line="228" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/conversion/impl/XWorkConverterTest.java"/>
<codefragment>
<![CDATA[
        assertTrue(o instanceof Bar);

        Bar b = (Bar) o;
        assertEquals(value, b.getTitle() + ":" + b.getSomethingElse());
    }

    public void testLocalizedDateConversion() throws Exception {
        Date date = new Date(System.currentTimeMillis());
        Locale locale = Locale.GERMANY;
        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);
        String dateString = df.format(date);
        context.put(ActionContext.LOCALE, locale);
        assertEquals(dateString, converter.convertValue(context, null, null, null, date, String.class));
    }

    public void testStringToIntConversions() {
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="113">
<file line="52" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/CheckboxListHandler.java"/>
<file line="45" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/RadioHandler.java"/>
<file line="77" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/javatemplates/src/main/java/org/apache/struts2/views/java/simple/SelectHandler.java"/>
<codefragment>
<![CDATA[
        ValueStack stack = this.context.getStack();
        if (listObj != null) {
            Iterator itt = MakeIterator.convert(listObj);
            while (itt.hasNext()) {
                Object item = itt.next();
                stack.push(item);

                //key
                Object itemKey = findValue(listKey != null ? listKey : "top");
                String itemKeyStr = StringUtils.defaultString(itemKey == null ? null : itemKey.toString()); 
                //value
                Object itemValue = findValue(listValue != null ? listValue : "top");
                String itemValueStr = StringUtils.defaultString(itemValue == null ? null : itemValue.toString()); 
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="112">
<file line="227" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/result/ServletRedirectResultTest.java"/>
<file line="275" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/result/ServletRedirectResultTest.java"/>
<codefragment>
<![CDATA[
            .addParam("param", "${list}")
            .build();

        ActionContext context = ActionContext.getContext();
        MockHttpServletRequest req = new MockHttpServletRequest();
        MockHttpServletResponse res = new MockHttpServletResponse();
        context.put(ServletActionContext.HTTP_REQUEST, req);
        context.put(ServletActionContext.HTTP_RESPONSE, res);

        Map<String, ResultConfig> results=  new HashMap<String, ResultConfig>();
        results.put("myResult", resultConfig);

        ActionConfig actionConfig = new ActionConfig.Builder("", "", "")
                .addResultConfigs(results).build();

        ServletRedirectResult result = new ServletRedirectResult();
        result.setLocation("/myNamespace/myAction.action");
        result.setParse(true);
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="112">
<file line="43" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/ActionSupport.java"/>
<file line="78" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/validator/DelegatingValidatorContext.java"/>
<codefragment>
<![CDATA[
    public void setActionErrors(Collection<String> errorMessages) {
        validationAware.setActionErrors(errorMessages);
    }

    public Collection<String> getActionErrors() {
        return validationAware.getActionErrors();
    }

    public void setActionMessages(Collection<String> messages) {
        validationAware.setActionMessages(messages);
    }

    public Collection<String> getActionMessages() {
        return validationAware.getActionMessages();
    }

    public void setFieldErrors(Map<String, List<String>> errorMap) {
        validationAware.setFieldErrors(errorMap);
    }

    public Map<String, List<String>> getFieldErrors() {
        return validationAware.getFieldErrors();
    }
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="111">
<file line="169" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/FieldErrorTagTest.java"/>
<file line="190" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/FieldErrorTagTest.java"/>
<codefragment>
<![CDATA[
    public void testWithParamsWithoutFieldErrors2() throws Exception {
        FieldErrorTag tag = new FieldErrorTag();
        ((InternalAction)action).setHaveFieldErrors(false);
        tag.setPageContext(pageContext);
        tag.doStartTag();
            ParamTag pTag1 = new ParamTag();
            pTag1.setPageContext(pageContext);
            pTag1.setValue("%{'field1'}");
            pTag1.doStartTag();
            pTag1.doEndTag();

            ParamTag pTag2 = new ParamTag();
            pTag2.setPageContext(pageContext);
            pTag2.setValue("%{'field3'}");
            pTag2.doStartTag();
            pTag2.doEndTag();
        tag.doEndTag();

        verify(FieldErrorTagTest.class.getResource("fielderror-2.txt"));
    }


    public void testWithParamsWithoutFieldErrors3() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="111">
<file line="231" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/AnchorTagTest.java"/>
<file line="110" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/URLTagTest.java"/>
<codefragment>
<![CDATA[
        tag.setValue("testAction.action?id1=tagId1&id2=tagId2&tagId=tagValue");

        ParamTag param1 = new ParamTag();
        param1.setPageContext(pageContext);
        param1.setName("param1");
        param1.setValue("%{'param1value'}");

        ParamTag param2 = new ParamTag();
        param2.setPageContext(pageContext);
        param2.setName("param2");
        param2.setValue("%{'param2value'}");

        ParamTag param3 = new ParamTag();
        param3.setPageContext(pageContext);
        param3.setName("id1");
        param3.setValue("%{'paramId1'}");


        tag.doStartTag();
        param1.doStartTag();
        param1.doEndTag();
        param2.doStartTag();
        param2.doEndTag();
        param3.doStartTag();
        param3.doEndTag();
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="110">
<file line="189" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/views/jsp/PortletUrlTagTest.java"/>
<file line="286" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/views/jsp/PortletUrlTagTest.java"/>
<codefragment>
<![CDATA[
        mockPortletRes.expects(once()).method("createActionURL").will(
                returnValue(mockPortletUrl.proxy()));
        mockCtx.expects(atLeastOnce()).method("getMajorVersion").will(returnValue(1));

        Map paramMap = new HashMap();
        paramMap.put(PortletConstants.ACTION_PARAM, new String[]{"/view/testAction"});
        paramMap.put(PortletConstants.MODE_PARAM, new String[]{mode.toString()});

        mockPortletUrl.expects(once()).method("setParameters").with(new ParamMapConstraint(paramMap));
        mockPortletUrl.expects(once()).method("setPortletMode").with(eq(PortletMode.VIEW));
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="110">
<file line="229" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/JSONResultTest.java"/>
<file line="328" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/JSONResultTest.java"/>
<codefragment>
<![CDATA[
    public void testCommentWrap() throws Exception {
        JSONResult result = new JSONResult();

        TestAction action = new TestAction();
        stack.push(action);

        // test scape characters
        action.setArray(new String[] { "a", "a", "\"", "\\", "/", "\b", "\f", "\n", "\r", "\t" });

        List list = new ArrayList();

        list.add("b");
        list.add(1);
        list.add(new int[] { 10, 12 });
        action.setCollection(list);

        // beans
        List collection2 = new ArrayList();
        Bean bean1 = new Bean();

        bean1.setStringField("str");
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="110">
<file line="65" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/dispatcher/ng/StrutsPrepareAndExecuteFilterIntegrationTest.java"/>
<file line="85" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/dispatcher/ng/StrutsPrepareAndExecuteFilterIntegrationTest.java"/>
<codefragment>
<![CDATA[
    public void testActionMappingLookup() throws ServletException, IOException {
        MockHttpServletRequest request = new MockHttpServletRequest();
        MockHttpServletResponse response = new MockHttpServletResponse();
        MockFilterConfig filterConfig = new MockFilterConfig();
        MockFilterChain filterChain = new MockFilterChain() {
            @Override
            public void doFilter(ServletRequest req, ServletResponse res) {
                fail("Shouldn't get here");
            }
        };

        request.setRequestURI("/hello.action");
        StrutsPrepareAndExecuteFilter filter = new StrutsPrepareAndExecuteFilter();
        filter.init(filterConfig);
        filter.doFilter(request, response, filterChain);
        assertEquals(200, response.getStatus());
        assertNull(ActionContext.getContext());
        assertNull(Dispatcher.getInstance());
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="110">
<file line="40" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/VisitorFieldValidatorModelTest.java"/>
<file line="39" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/VisitorFieldValidatorTest.java"/>
<codefragment>
<![CDATA[
        container.inject(action);

        TestBean bean = action.getBean();
        Calendar cal = new GregorianCalendar(1900, 01, 01);
        bean.setBirth(cal.getTime());
        bean.setCount(-1);

        ActionConfig config = new ActionConfig.Builder("", "name", "").build();
        ActionInvocation invocation = EasyMock.createNiceMock(ActionInvocation.class);
        ActionProxy proxy = EasyMock.createNiceMock(ActionProxy.class);

        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(action).anyTimes();
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="110">
<file line="86" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/dispatcher/ApplicationMap.java"/>
<file line="86" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/main/java/org/apache/struts2/portlet/PortletApplicationMap.java"/>
<codefragment>
<![CDATA[
                        Map.Entry entry = (Map.Entry) obj;

                        return ((key == null) ? (entry.getKey() == null) : key
                                .equals(entry.getKey()))
                                && ((value == null) ? (entry.getValue() == null)
                                        : value.equals(entry.getValue()));
                    }

                    public int hashCode() {
                        return ((key == null) ? 0 : key.hashCode())
                                ^ ((value == null) ? 0 : value.hashCode());
                    }

                    public String getKey() {
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="109">
<file line="909" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<file line="1034" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<codefragment>
<![CDATA[
                AstEmpty jjtn003 = new AstEmpty(JJTEMPTY);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
                try {
                    Unary();
                } catch (Throwable jjte003) {
                    if (jjtc003) {
                        jjtree.clearNodeScope(jjtn003);
                        jjtc003 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte003 instanceof RuntimeException) {
                        {
                            if (true) throw (RuntimeException) jjte003;
                        }
                    }
                    if (jjte003 instanceof ParseException) {
                        {
                            if (true) throw (ParseException) jjte003;
                        }
                    }
                    {
                        if (true) throw (Error) jjte003;
                    }
                } finally {
                    if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, true);
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="109">
<file line="864" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<file line="1001" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<codefragment>
<![CDATA[
                AstNot jjtn002 = new AstNot(JJTNOT);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                try {
                    Unary();
                } catch (Throwable jjte002) {
                    if (jjtc002) {
                        jjtree.clearNodeScope(jjtn002);
                        jjtc002 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                        {
                            if (true) throw (RuntimeException) jjte002;
                        }
                    }
                    if (jjte002 instanceof ParseException) {
                        {
                            if (true) throw (ParseException) jjte002;
                        }
                    }
                    {
                        if (true) throw (Error) jjte002;
                    }
                } finally {
                    if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="109">
<file line="819" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<file line="956" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<codefragment>
<![CDATA[
                AstNegative jjtn001 = new AstNegative(JJTNEGATIVE);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                try {
                    Unary();
                } catch (Throwable jjte001) {
                    if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                        {
                            if (true) throw (RuntimeException) jjte001;
                        }
                    }
                    if (jjte001 instanceof ParseException) {
                        {
                            if (true) throw (ParseException) jjte001;
                        }
                    }
                    {
                        if (true) throw (Error) jjte001;
                    }
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="109">
<file line="123" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<file line="163" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<codefragment>
<![CDATA[
            jj_consume_token(START_DYNAMIC_EXPRESSION);
            Expression();
            jj_consume_token(END_EXPRESSION);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /*
     * Expression
     * EL Expression Language Root, goes to Choice
     */
    final public void Expression() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="109">
<file line="155" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/MessageStorePreResultListenerTest.java"/>
<file line="239" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/MessageStorePreResultListenerTest.java"/>
<codefragment>
<![CDATA[
        assertTrue(sessionMap.containsKey(MessageStoreInterceptor.fieldErrorsSessionKey));

        List actionErrors = (List) sessionMap.get(MessageStoreInterceptor.actionErrorsSessionKey);
        List actionMessages = (List) sessionMap.get(MessageStoreInterceptor.actionMessagesSessionKey);
        Map fieldErrors = (Map) sessionMap.get(MessageStoreInterceptor.fieldErrorsSessionKey);

        assertEquals(actionErrors.size(), 2);
        assertEquals(actionMessages.size(), 2);
        assertEquals(fieldErrors.size(), 2);

        assertTrue(actionErrors.contains("some action error 1"));
        assertTrue(actionErrors.contains("some action error 2"));
        assertTrue(actionMessages.contains("some action message 1"));
        assertTrue(actionMessages.contains("some action message 2"));
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="109">
<file line="76" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/MessageStoreInterceptorTest.java"/>
<file line="204" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/MessageStoreInterceptorTest.java"/>
<codefragment>
<![CDATA[
        actionContext.put(ActionContext.SESSION, sessionMap);

        HttpSession mockedSession = EasyMock.createControl().createMock(HttpSession.class);
        HttpServletRequest mockedRequest = EasyMock.createControl().createMock(HttpServletRequest.class);
        mockedRequest.getSession(false);
        EasyMock.expectLastCall().andReturn(mockedSession);
        EasyMock.expectLastCall().once();
        ServletActionContext.setRequest(mockedRequest);

        EasyMock.replay(mockedRequest);

        // Mock (ActionInvocation)
        ActionInvocation mockActionInvocation = EasyMock.createControl().createMock(ActionInvocation.class);
        mockActionInvocation.getInvocationContext();
        EasyMock.expectLastCall().andReturn(actionContext);
        EasyMock.expectLastCall().anyTimes();

        mockActionInvocation.addPreResultListener(EasyMock.<PreResultListener>anyObject());
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="109">
<file line="385" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/components/UIComponentTest.java"/>
<file line="410" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/components/UIComponentTest.java"/>
<codefragment>
<![CDATA[
            SelectTag tag = new SelectTag();
            tag.setList("{}");
            tag.setName("name");
            tag.setLabel("label");
            tag.setPageContext(pageContext);
            tag.doStartTag();
            assertEquals(tag.getComponent().getComponentStack().peek(), tag.getComponent());
            tag.doEndTag();

            assertEquals(t.getComponent().getComponentStack().peek(), t.getComponent());

            t.doEndTag();
        }
        catch (Exception e) {
            e.printStackTrace();
            fail(e.toString());
        }
    }

    // submit
    public void testSubmitDisposeItselfFromComponentStack() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="109">
<file line="144" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/StringValidatorTest.java"/>
<file line="163" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/StringValidatorTest.java"/>
<codefragment>
<![CDATA[
        equidae.setDonkey("asdfasdfasdf");
        ActionContext.getContext().getValueStack().push(equidae);
        context = new DelegatingValidatorContext(new ValidationAwareSupport());
        container.getInstance(ActionValidatorManager.class).validate(equidae, null, context);
        assertTrue(context.hasFieldErrors());

        fieldErrors = context.getFieldErrors();

        // cow
        assertTrue(fieldErrors.containsKey("cow"));
        errors = (List) fieldErrors.get("cow");
        assertEquals(2, errors.size());
        assertEquals("noTrim-min5-max10", errors.get(0));
        assertEquals("noTrim-max10", errors.get(1));
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="109">
<file line="175" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/DefaultWorkflowInterceptorTest.java"/>
<file line="80" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/ValidationInterceptorPrefixMethodInvocationTest.java"/>
<codefragment>
<![CDATA[
        action = EasyMock.createNiceMock(ValidateAction.class);


        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(action).anyTimes();
        EasyMock.expect(invocation.invoke()).andAnswer(new IAnswer<String>() {
            public String answer() throws Throwable {
                return result;
            }
        }).anyTimes();

        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();
        EasyMock.expect(proxy.getMethod()).andAnswer(new IAnswer<String>() {
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="108">
<file line="134" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/compiler/ImplicitTagLibraryInfo.java"/>
<file line="229" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/jasper/compiler/TagLibraryInfoImpl.java"/>
<codefragment>
<![CDATA[
        Iterator list = tld.findChildren();

        while (list.hasNext()) {
            TreeNode element = (TreeNode) list.next();
            String tname = element.getName();

            if ("tlibversion".equals(tname) // JSP 1.1
                    || "tlib-version".equals(tname)) { // JSP 1.2
                this.tlibversion = element.getBody();
            } else if ("jspversion".equals(tname)
                    || "jsp-version".equals(tname)) {
                this.jspversion = element.getBody();
            } else if ("shortname".equals(tname) || "short-name".equals(tname))
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="108">
<file line="258" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/util/DefaultUrlHelperTest.java"/>
<file line="316" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/util/DefaultUrlHelperTest.java"/>
<codefragment>
<![CDATA[
        mockHttpServletRequest.expectAndReturn("getServerPort", 7002);
        mockHttpServletRequest.expectAndReturn("getContextPath", "/mywebapp");

        Mock mockHttpServletResponse = new Mock(HttpServletResponse.class);
        mockHttpServletResponse.expectAndReturn("encodeURL", expectedString, expectedString);

        String actionName = "/MyAction.action";
        TreeMap params = new TreeMap();
        params.put("hello", new String[]{"earth", "mars"});
        params.put("foo", "bar");

        String urlString = urlHelper.buildUrl(actionName, (HttpServletRequest) mockHttpServletRequest.proxy(), (HttpServletResponse) mockHttpServletResponse.proxy(), params, "http", true, true);
        assertEquals(expectedString, urlString);
    }

    /**
     * The UrlHelper should build a URL that starts with "https" followed by the server name when the scheme of the
     * current request is "http" and the port for the "https" scheme is 443. When the request has been forwarded
     * in a Servlet 2.4 container, the UrlHelper should use the javax.servlet.forward.request_uri request attribute
     * instead of a call to HttpServletRequest#getRequestURI().
     */
    public void testForwardedRequest() {
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="108">
<file line="233" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/util/DefaultUrlHelperTest.java"/>
<file line="287" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/util/DefaultUrlHelperTest.java"/>
<codefragment>
<![CDATA[
        mockHttpServletRequest.expectAndReturn("getServerPort", 7001);
        mockHttpServletRequest.expectAndReturn("getContextPath", "/mywebapp");

        Mock mockHttpServletResponse = new Mock(HttpServletResponse.class);
        mockHttpServletResponse.expectAndReturn("encodeURL", expectedString, expectedString);

        String actionName = "/MyAction.action";
        TreeMap params = new TreeMap();
        params.put("hello", new String[]{"earth", "mars"});
        params.put("foo", "bar");

        String urlString = urlHelper.buildUrl(actionName, (HttpServletRequest) mockHttpServletRequest.proxy(), (HttpServletResponse) mockHttpServletResponse.proxy(), params, "https", true, true);
        assertEquals(expectedString, urlString);
    }

    /**
     * This test is similar to {@link #testSwitchToHttpScheme()} with the HTTP port equal to 7001 and the HTTPS port
     * equal to port 7002.
     */
    public void testSwitchToHttpNonDefaultPort() {
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="108">
<file line="91" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/result/ServletActionRedirectResultTest.java"/>
<file line="146" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/result/ServletActionRedirectResultTest.java"/>
<codefragment>
<![CDATA[
        result.setParse(false);
        result.setEncode(false);
        result.setPrependServletContext(false);
        result.setAnchor("fragment");
        result.setUrlHelper(new DefaultUrlHelper());

        IMocksControl control = createControl();
        ActionProxy mockActionProxy = control.createMock(ActionProxy.class);
        ActionInvocation mockInvocation = control.createMock(ActionInvocation.class);
        expect(mockInvocation.getProxy()).andReturn(mockActionProxy);
        expect(mockInvocation.getResultCode()).andReturn("myResult");
        expect(mockActionProxy.getConfig()).andReturn(actionConfig);
        expect(mockInvocation.getInvocationContext()).andReturn(context);
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="107">
<file line="477" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/JSONInterceptorTest.java"/>
<file line="503" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/json/src/test/java/org/apache/struts2/json/JSONInterceptorTest.java"/>
<codefragment>
<![CDATA[
        List<Bean> beans = action.getAnotherBean().getYetAnotherBean().getBeans();

        assertNotNull(beans);
        assertEquals(1, beans.size());
        assertTrue(beans.get(0).isBooleanField());
        assertEquals(beans.get(0).getStringField(), "test");
        assertEquals(beans.get(0).getIntField(), 10);
        assertEquals(beans.get(0).getCharField(), 's');
        assertEquals(beans.get(0).getDoubleField(), 10.1);
        assertEquals(beans.get(0).getByteField(), 3);
    }
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="107">
<file line="31" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/AstDeferredExpression.java"/>
<file line="31" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/AstDynamicExpression.java"/>
<codefragment>
<![CDATA[
    public AstDynamicExpression(int id) {
        super(id);
    }

    public Class getType(EvaluationContext ctx)
            throws ELException {
        return this.children[0].getType(ctx);
    }

    public Object getValue(EvaluationContext ctx)
            throws ELException {
        return this.children[0].getValue(ctx);
    }

    public boolean isReadOnly(EvaluationContext ctx)
            throws ELException {
        return this.children[0].isReadOnly(ctx);
    }

    public void setValue(EvaluationContext ctx, Object value)
            throws ELException {
        this.children[0].setValue(ctx, value);
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="107">
<file line="63" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/ValidationErrorAwareTest.java"/>
<file line="80" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/ValidationInterceptorPrefixMethodInvocationTest.java"/>
<codefragment>
<![CDATA[
        action = EasyMock.createNiceMock(ValidateAction.class);


        EasyMock.expect(invocation.getProxy()).andReturn(proxy).anyTimes();
        EasyMock.expect(invocation.getAction()).andReturn(action).anyTimes();
        EasyMock.expect(invocation.invoke()).andAnswer(new IAnswer<String>() {
            public String answer() throws Throwable {
                return result;
            }
        }).anyTimes();

        EasyMock.expect(proxy.getConfig()).andReturn(config).anyTimes();
        EasyMock.expect(proxy.getMethod()).andAnswer(new IAnswer<String>() {
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="106">
<file line="75" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/result/ServletActionRedirectResultTest.java"/>
<file line="130" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/result/ServletActionRedirectResultTest.java"/>
<codefragment>
<![CDATA[
        ActionContext context = ActionContext.getContext();
        MockHttpServletRequest req = new MockHttpServletRequest();
        MockHttpServletResponse res = new MockHttpServletResponse();
        context.put(ServletActionContext.HTTP_REQUEST, req);
        context.put(ServletActionContext.HTTP_RESPONSE, res);


        Map<String, ResultConfig> results=  new HashMap<String, ResultConfig>();
        results.put("myResult", resultConfig);

        ActionConfig actionConfig = new ActionConfig.Builder("", "", "")
                .addResultConfigs(results).build();

        ServletActionRedirectResult result = new ServletActionRedirectResult();
        result.setActionName("myAction");
        result.setNamespace("/myNamespace");
        result.setParse(false);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="106">
<file line="48" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/result/HttpHeaderResultTest.java"/>
<file line="66" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/result/HttpHeaderResultTest.java"/>
<codefragment>
<![CDATA[
    public void testHeaderValuesAreParsedAndSet() throws Exception {
        Map<String, String> params = new HashMap<String, String>();
        params.put("headers.foo", "${bar}");
        params.put("headers.baz", "baz");

        Map<String, String> values = new HashMap<String, String>();
        values.put("bar", "abc");
        ActionContext.getContext().getValueStack().push(values);

        reflectionProvider.setProperties(params, result);

        responseMock.expect("addHeader", C.args(C.eq("foo"), C.eq("abc")));
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="106">
<file line="77" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/StaticParametersInterceptorTest.java"/>
<file line="97" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/StaticParametersInterceptorTest.java"/>
<codefragment>
<![CDATA[
    public void testWithOneParametersNoParse() throws Exception {
        MockActionInvocation mai = new MockActionInvocation();
        MockActionProxy map = new MockActionProxy();
        ActionConfig ac = new ActionConfig.Builder("", "", "")
                .addParam("top.name", "${top.hero}")
                .build();
        map.setConfig(ac);
        mai.setProxy(map);
        mai.setAction(new SimpleFooAction());

        User user = new User();
        ActionContext.getContext().getValueStack().push(user);
        int before = ActionContext.getContext().getValueStack().size();
        interceptor.setParse("false");
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="106">
<file line="84" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/dispatcher/RequestMap.java"/>
<file line="77" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/main/java/org/apache/struts2/portlet/PortletRequestMap.java"/>
<codefragment>
<![CDATA[
                        Entry entry = (Entry) obj;

                        return ((key == null) ? (entry.getKey() == null) : key
                                .equals(entry.getKey()))
                                && ((value == null) ? (entry.getValue() == null)
                                        : value.equals(entry.getValue()));
                    }

                    public int hashCode() {
                        return ((key == null) ? 0 : key.hashCode())
                                ^ ((value == null) ? 0 : value.hashCode());
                    }

                    public String getKey() {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="105">
<file line="134" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/main/java/org/apache/struts2/views/freemarker/PortletFreemarkerResult.java"/>
<file line="163" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/main/java/org/apache/struts2/views/freemarker/PortletFreemarkerResult.java"/>
<codefragment>
<![CDATA[
    private void executeResourceResult(String location, ActionInvocation invocation)
             throws TemplateException, IOException, PortletException {
         this.location = location;
         this.invocation = invocation;
         this.configuration = getConfiguration();
         this.wrapper = getObjectWrapper();

         HttpServletRequest req = ServletActionContext.getRequest();

         if (!location.startsWith("/")) {
             String base = ResourceUtil.getResourceBase(req);
             location = base + "/" + location;
         }

         Template template = configuration.getTemplate(location, deduceLocale());
         TemplateModel model = createModel();
         // Give subclasses a chance to hook into preprocessing
         if (preTemplateProcess(template, model)) {
             try {
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="105">
<file line="467" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<file line="502" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<codefragment>
<![CDATA[
        Map<String, ResultConfig> results = builder.build(ActionLevelResultsNamesAction.class, getAnnotation(ActionLevelResultsNamesAction.class, "execute", Action.class), "action-level-results", packageConfig);
        assertEquals(4, results.size());
        assertEquals("error", results.get("error").getName());
        assertEquals("input", results.get("input").getName());
        assertEquals("success", results.get("success").getName());
        assertEquals("failure", results.get("failure").getName());
        assertEquals(3, results.get("error").getParams().size());
        assertEquals("/WEB-INF/location/namespace/error.jsp", results.get("error").getParams().get("location"));
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="105">
<file line="219" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/FormTagTest.java"/>
<file line="285" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/ui/FormTagTest.java"/>
<codefragment>
<![CDATA[
    public void testFormWithCustomOnsubmitEnabledWithValidateEnabled3() throws Exception {

        prepareMockInvocation();
        FormTag tag = new FormTag();
        tag.setPageContext(pageContext);
        tag.setName("myForm");
        tag.setMethod("post");
        tag.setAction("doubleValidationAction");
        tag.setAcceptcharset("UTF-8");
        tag.setEnctype("myEncType");
        tag.setTitle("mytitle");
        tag.setOnsubmit("submitMe()");
        tag.setValidate("true");
        tag.setNamespace("");

        UpDownSelectTag t = new UpDownSelectTag();
        t.setPageContext(pageContext);
        t.setName("myUpDownSelectTag");
        t.setList("{}");

        tag.doStartTag();
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="105">
<file line="101" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/DefaultTextProviderTest.java"/>
<file line="112" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/DefaultTextProviderTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("Hello World", tp.getText("hello", "this is default", args, null)); // no args in bundle
        assertEquals("Hello World Santa", tp.getText("hello.0", "this is default", args, null)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", tp.getText("hello.1", "this is default", args, null));

        assertEquals("this is default", tp.getText("not.in.bundle", "this is default", args, null));
        assertEquals("this is default Santa", tp.getText("not.in.bundle", "this is default {0}", args, null));
        assertEquals("this is default Santa speaking loud", tp.getText("not.in.bundle", "this is default {0} speaking {1}", args, null));
    }

    public void testGetBundle() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="105">
<file line="262" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/ActionSupportTest.java"/>
<file line="278" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/ActionSupportTest.java"/>
<codefragment>
<![CDATA[
        assertEquals("Hello World", mas.getText("hello", "this is default", args, stack)); // no args in bundle
        assertEquals("Hello World Santa", mas.getText("hello.0", "this is default", args, stack)); // only 1 arg in bundle
        assertEquals("Hello World. This is Santa speaking loud", mas.getText("hello.1", "this is default", args, stack));

        assertEquals("this is default", mas.getText("not.in.bundle", "this is default", args, stack));
        assertEquals("this is default Santa", mas.getText("not.in.bundle", "this is default {0}", args, stack));
        assertEquals("this is default Santa speaking loud", mas.getText("not.in.bundle", "this is default {0} speaking {1}", args, stack));
    }

    public void testGetBundle() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="105">
<file line="95" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/components/DoubleListUIBean.java"/>
<file line="101" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/components/Select.java"/>
<codefragment>
<![CDATA[
    }

    public void evaluateExtraParams() {
        super.evaluateExtraParams();

        if (emptyOption != null) {
            addParameter("emptyOption", findValue(emptyOption, Boolean.class));
        }

        if (multiple != null) {
            addParameter("multiple", findValue(multiple, Boolean.class));
        }

        if (size != null) {
            addParameter("size", findString(size));
        }

        if ((headerKey != null) && (headerValue != null)) {
            addParameter("headerKey", findString(headerKey));
            addParameter("headerValue", findString(headerValue));
        }
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="104">
<file line="457" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<file line="761" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<codefragment>
<![CDATA[
                        Multiplication();
                    } catch (Throwable jjte002) {
                        if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte002;
                            }
                        }
                        if (jjte002 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte002;
                            }
                        }
                        {
                            if (true) throw (Error) jjte002;
                        }
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, 2);
                        }
                    }
                    break;
                default:
                    jj_la1[17] = jj_gen;
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="104">
<file line="283" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<file line="345" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<codefragment>
<![CDATA[
                Equality();
            } catch (Throwable jjte001) {
                if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte001;
                    }
                }
                if (jjte001 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte001;
                    }
                }
                {
                    if (true) throw (Error) jjte001;
                }
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, 2);
                }
            }
        }
    }

    /*
     * Equality
     * For '==' 'eq' '!=' 'ne', then Compare
     */
    final public void Equality() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="104">
<file line="289" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/PropertyTagTest.java"/>
<file line="317" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/jsp/PropertyTagTest.java"/>
<codefragment>
<![CDATA[
        initDispatcher(new HashMap() {{ put(StrutsConstants.STRUTS_TAG_ALTSYNTAX, "false");}});

        Foo foo = new Foo();
        foo.setTitle("tm_jee");
        stack.push(foo);

        MockJspWriter jspWriter = new MockJspWriter();
        jspWriter.setExpectedData("Foo is: tm_jee");

        MockPageContext pageContext = new MockPageContext();
        pageContext.setJspWriter(jspWriter);
        pageContext.setRequest(request);

        // test
        {PropertyTag tag = new PropertyTag();
        tag.setPageContext(pageContext);
        tag.setValue("formatTitle()");
        tag.doStartTag();
        tag.doEndTag();}

        // verify test
        request.verify();
        jspWriter.verify();
        pageContext.verify();
    }


    public void testWithoutAltSyntax2() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="104">
<file line="91" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/SimpleActionValidationTest.java"/>
<file line="168" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/SimpleActionValidationTest.java"/>
<codefragment>
<![CDATA[
        params.put("bar", "42");

        HashMap<String, Object> extraContext = new HashMap<>();
        extraContext.put(ActionContext.PARAMETERS, HttpParameters.create(params).build());

        try {
            ActionProxy proxy = actionProxyFactory.createActionProxy("", MockConfigurationProvider.VALIDATION_ACTION_NAME, null, extraContext);
            proxy.execute();
            assertTrue(((ValidationAware) proxy.getAction()).hasFieldErrors());

            Map<String, List<String>> errors = ((ValidationAware) proxy.getAction()).getFieldErrors();
            List<String> barErrors = errors.get("bar");
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="104">
<file line="35" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/LongRangeValidatorTest.java"/>
<file line="35" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/ShortRangeValidatorTest.java"/>
<codefragment>
<![CDATA[
        params.put("shortFoo", "200");

        HashMap<String, Object> extraContext = new HashMap<>();
        extraContext.put(ActionContext.PARAMETERS, HttpParameters.create(params).build());

        try {
            ActionProxy proxy = actionProxyFactory.createActionProxy("", MockConfigurationProvider.VALIDATION_ACTION_NAME, null, extraContext);
            proxy.execute();
            assertTrue(((ValidationAware) proxy.getAction()).hasFieldErrors());

            Map errors = ((ValidationAware) proxy.getAction()).getFieldErrors();
            List errorMessages = (List) errors.get("shortFoo");
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="104">
<file line="38" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/IntRangeValidatorTest.java"/>
<file line="91" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/SimpleActionValidationTest.java"/>
<codefragment>
<![CDATA[
        params.put("bar", "7");

        HashMap<String, Object> extraContext = new HashMap<>();
        extraContext.put(ActionContext.PARAMETERS, HttpParameters.create(params).build());

        try {
            ActionProxy proxy = actionProxyFactory.createActionProxy("", MockConfigurationProvider.VALIDATION_ACTION_NAME, null, extraContext);
            proxy.execute();
            assertTrue(((ValidationAware) proxy.getAction()).hasFieldErrors());

            Map<String, List<String>> errors = ((ValidationAware) proxy.getAction()).getFieldErrors();
            List<String> bazErrors = errors.get("baz");
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="104">
<file line="32" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/DoubleRangeValidatorTest.java"/>
<file line="188" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/DoubleRangeValidatorTest.java"/>
<codefragment>
<![CDATA[
        ActionProxy proxy = actionProxyFactory.createActionProxy("", MockConfigurationProvider.EXPRESSION_VALIDATION_ACTION, null, context);
        proxy.execute();
        assertTrue(((ValidationAware) proxy.getAction()).hasFieldErrors());

        Map<String, List<String>> errors = ((ValidationAware) proxy.getAction()).getFieldErrors();
        List<String> errorMessages = errors.get("percentage");
        assertNotNull("Expected double range validation error message.", errorMessages);
        assertEquals(1, errorMessages.size());

        String errorMessage = errorMessages.get(0);
        assertNotNull("Expecting: percentage must be between 0.1 and 10.1, current value is 100.0123.", errorMessage);
        assertEquals("percentage must be between 0.1 and 10.1, current value is 100.0123.", errorMessage);
    }

    public void testExpressionParams() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="103">
<file line="80" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/dispatcher/Jsr286DispatcherTest.java"/>
<file line="151" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/dispatcher/Jsr286DispatcherTest.java"/>
<codefragment>
<![CDATA[
		setupActionFactory("/edit", "default", "success",
				EasyMock.createNiceMock(ValueStack.class));

		mockInvocation.expects(once()).method("getStack")
				.will(returnValue(null));

		try {
			dispatcher
					.setActionProxyFactory((ActionProxyFactory) mockActionFactory
							.proxy());
			dispatcher.init((PortletConfig) mockConfig.proxy());
			dispatcher.render((RenderRequest) mockRequest.proxy(),
					(RenderResponse) mockResponse.proxy());
		} catch (Exception e) {
			e.printStackTrace();
			fail("Error occured");
		}
	}
	
	public void testParseConfigWithBang() {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="103">
<file line="131" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/components/UIComponentTest.java"/>
<file line="230" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/components/UIComponentTest.java"/>
<file line="309" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/components/UIComponentTest.java"/>
<file line="361" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/components/UIComponentTest.java"/>
<file line="459" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/components/UIComponentTest.java"/>
<file line="483" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/components/UIComponentTest.java"/>
<codefragment>
<![CDATA[
            TextFieldTag tag = new TextFieldTag();
            tag.setName("name");
            tag.setLabel("label");
            tag.setPageContext(pageContext);
            tag.doStartTag();
            assertEquals(tag.getComponent().getComponentStack().peek(), tag.getComponent());
            tag.doEndTag();
            assertEquals(t.getComponent().getComponentStack().peek(), t.getComponent());

            t.doEndTag();
        }
        catch (Exception e) {
            e.printStackTrace();
            fail(e.toString());
        }
    }

    // token
    public void testTokenComponentDisposeItselfFromComponentStack() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="103">
<file line="121" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/ParametersInterceptorTest.java"/>
<file line="161" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/interceptor/ParametersInterceptorTest.java"/>
<codefragment>
<![CDATA[
                put(pollution3, true);
            }
        };

        final Map<String, Boolean> excluded = new HashMap<>();
        ParametersInterceptor pi = new ParametersInterceptor() {

            @Override
            protected boolean isExcluded(String paramName) {
                boolean result = super.isExcluded(paramName);
                excluded.put(paramName, result);
                return result;
            }

        };

        container.inject(pi);
        ValueStack vs = ActionContext.getContext().getValueStack();

        // when
        ValidateAction action = new ValidateAction();
        pi.setParameters(action, vs, HttpParameters.create(params).build());

        // then
        assertEquals(3, action.getActionMessages().size());
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="102">
<file line="183" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/views/jsp/PortletUrlTagTest.java"/>
<file line="256" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/views/jsp/PortletUrlTagTest.java"/>
<codefragment>
<![CDATA[
    public void testUrlWithQueryParams() throws Exception {

        PortletMode mode = PortletMode.VIEW;

        mockHttpReq.stubs().method("getQueryString").will(returnValue(""));

        mockPortletRes.expects(once()).method("createRenderURL").will(
                returnValue(mockPortletUrl.proxy()));
        mockCtx.expects(atLeastOnce()).method("getMajorVersion").will(returnValue(1));

        Map paramMap = new HashMap();
        paramMap.put(PortletConstants.ACTION_PARAM, new String[]{"/view/testAction"});
        paramMap.put("testParam1", new String[]{"testValue1"});
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="102">
<file line="125" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<file line="1211" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<file line="1348" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<codefragment>
<![CDATA[
            jj_consume_token(RPAREN);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    /*
     * Literal
     * Reserved Keywords
     */
    final public void Literal() throws ParseException {
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="102">
<file line="53" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/dispatcher/mapper/DefaultActionMapperTest.java"/>
<file line="44" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/dispatcher/mapper/Restful2ActionMapperTest.java"/>
<codefragment>
<![CDATA[
        mapper.setExtensions("");
        req = new MockHttpServletRequest();
        req.setupGetParameterMap(new HashMap());
        req.setupGetContextPath("/my/namespace");

        config = new DefaultConfiguration();
        PackageConfig pkg = new PackageConfig.Builder("myns")
            .namespace("/my/namespace").build();
        PackageConfig pkg2 = new PackageConfig.Builder("my")
            .namespace("/my").build();
        config.addPackageConfig("mvns", pkg);
        config.addPackageConfig("my", pkg2);
        configManager = new ConfigurationManager() {
            public Configuration getConfiguration() {
                return config;
            }
        };
    }
    
    public void testGetIndex() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="102">
<file line="131" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/components/UIComponentTest.java"/>
<file line="386" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/components/UIComponentTest.java"/>
<codefragment>
<![CDATA[
            tag.setList("{}");
            tag.setName("name");
            tag.setLabel("label");
            tag.setPageContext(pageContext);
            tag.doStartTag();
            assertEquals(tag.getComponent().getComponentStack().peek(), tag.getComponent());
            tag.doEndTag();
            assertEquals(t.getComponent().getComponentStack().peek(), t.getComponent());

            t.doEndTag();
        }
        catch (Exception e) {
            e.printStackTrace();
            fail(e.toString());
        }
    }

    // select
    public void testSelectComponentDisposeItselfFromComponentStack() throws Exception {
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="102">
<file line="86" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/dispatcher/ApplicationMap.java"/>
<file line="77" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/main/java/org/apache/struts2/portlet/PortletRequestMap.java"/>
<codefragment>
<![CDATA[
                        Entry entry = (Entry) obj;

                        return ((key == null) ? (entry.getKey() == null) : key
                                .equals(entry.getKey()))
                                && ((value == null) ? (entry.getValue() == null)
                                        : value.equals(entry.getValue()));
                    }

                    public int hashCode() {
                        return ((key == null) ? 0 : key.hashCode())
                                ^ ((value == null) ? 0 : value.hashCode());
                    }

                    public String getKey() {
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="101">
<file line="146" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/dispatcher/Jsr168DispatcherTest.java"/>
<file line="269" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/portlet/src/test/java/org/apache/struts2/portlet/dispatcher/Jsr168DispatcherTest.java"/>
<codefragment>
<![CDATA[
        setupActionFactory("/edit", "default", "success", EasyMock.createNiceMock(ValueStack.class));

        mockInvocation.expects(once()).method("getStack").will(
                returnValue(null));
        //mockSession.expects(once()).method("setAttribute").with(new Constraint[]{eq(PortletActionConstants.LAST_MODE), eq(PortletMode.VIEW)});
        try {
            dispatcher
                    .setActionProxyFactory((ActionProxyFactory) mockActionFactory
                            .proxy());
            dispatcher.init((PortletConfig) mockConfig.proxy());
            dispatcher.render((RenderRequest) mockRequest.proxy(),
                    (RenderResponse) mockResponse.proxy());
        } catch (Exception e) {
            e.printStackTrace();
            fail("Error occured");
        }
    }
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="101">
<file line="728" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<file line="823" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<codefragment>
<![CDATA[
                        Unary();
                    } catch (Throwable jjte001) {
                        if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte001;
                            }
                        }
                        if (jjte001 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte001;
                            }
                        }
                        {
                            if (true) throw (Error) jjte001;
                        }
                    } finally {
                        if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, 2);
                        }
                    }
                    break;
                case DIV0:
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="101">
<file line="579" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<file line="868" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<codefragment>
<![CDATA[
                        Unary();
                    } catch (Throwable jjte002) {
                        if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte002;
                            }
                        }
                        if (jjte002 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte002;
                            }
                        }
                        {
                            if (true) throw (Error) jjte002;
                        }
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, 2);
                        }
                    }
                    break;
                case MOD0:
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="101">
<file line="412" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<file line="534" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<file line="728" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<codefragment>
<![CDATA[
                        Multiplication();
                    } catch (Throwable jjte001) {
                        if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte001;
                            }
                        }
                        if (jjte001 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte001;
                            }
                        }
                        {
                            if (true) throw (Error) jjte001;
                        }
                    } finally {
                        if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, 2);
                        }
                    }
                    break;
                case MINUS:
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="101">
<file line="86" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/dispatcher/ApplicationMap.java"/>
<file line="118" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/org/apache/struts2/dispatcher/SessionMap.java"/>
<codefragment>
<![CDATA[
                            Map.Entry<K, V> entry = (Map.Entry<K, V>) obj;

                            return ((key == null) ? (entry.getKey() == null) : key.equals(entry.getKey())) && ((value == null) ? (entry.getValue() == null) : value.equals(entry.getValue()));
                        }

                        public int hashCode() {
                            return ((key == null) ? 0 : key.hashCode()) ^ ((value == null) ? 0 : value.hashCode());
                        }

                        public K getKey() {
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="101">
<file line="121" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/config/entities/InterceptorConfig.java"/>
<file line="122" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/config/entities/ResultConfig.java"/>
<codefragment>
<![CDATA[
            target = new ResultConfig(orig);
        }

        public Builder name(String name) {
            target.name = name;
            return this;
        }

        public Builder className(String name) {
            target.className = name;
            return this;
        }

         public Builder addParam(String name, String value) {
            target.params.put(name, value);
            return this;
        }

        public Builder addParams(Map<String,String> params) {
            target.params.putAll(params);
            return this;
        }

        public Builder location(Location loc) {
            target.location = loc;
            return this;
        }

        public ResultConfig build() {
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="101">
<file line="94" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/main/java/com/opensymphony/xwork2/ValidationAwareSupport.java"/>
<file line="116" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/com/opensymphony/xwork2/validator/GenericValidatorContext.java"/>
<codefragment>
<![CDATA[
    public synchronized boolean hasFieldErrors() {
        return (fieldErrors != null) && !fieldErrors.isEmpty();
    }

    private Collection<String> internalGetActionErrors() {
        if (actionErrors == null) {
            actionErrors = new ArrayList<>();
        }

        return actionErrors;
    }

    private Collection<String> internalGetActionMessages() {
        if (actionMessages == null) {
            actionMessages = new ArrayList<>();
        }

        return actionMessages;
    }

    private Map<String, List<String>> internalGetFieldErrors() {
        if (fieldErrors == null) {
            fieldErrors = new HashMap<>();
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="101">
<file line="41" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/apps/showcase/src/main/java/org/apache/struts2/showcase/fileupload/MultipleFileUploadUsingArrayAction.java"/>
<file line="68" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/apps/showcase/src/main/java/org/apache/struts2/showcase/fileupload/MultipleFileUploadUsingListAction.java"/>
<codefragment>
<![CDATA[
		System.out.println("\n\n upload1");
		System.out.println("files:");
		for (File u : uploads) {
			System.out.println("*** " + u + "\t" + u.length());
		}
		System.out.println("filenames:");
		for (String n : uploadFileNames) {
			System.out.println("*** " + n);
		}
		System.out.println("content types:");
		for (String c : uploadContentTypes) {
			System.out.println("*** " + c);
		}
		System.out.println("\n\n");
		return SUCCESS;
	}
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="100">
<file line="761" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<file line="868" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<codefragment>
<![CDATA[
                        Unary();
                    } catch (Throwable jjte002) {
                        if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte002;
                            }
                        }
                        if (jjte002 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte002;
                            }
                        }
                        {
                            if (true) throw (Error) jjte002;
                        }
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, 2);
                        }
                    }
                    break;
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="100">
<file line="624" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<file line="913" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<codefragment>
<![CDATA[
                        Unary();
                    } catch (Throwable jjte003) {
                        if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte003 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte003;
                            }
                        }
                        if (jjte003 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte003;
                            }
                        }
                        {
                            if (true) throw (Error) jjte003;
                        }
                    } finally {
                        if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, 2);
                        }
                    }
                    break;
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="100">
<file line="457" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<file line="579" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/parser/ELParser.java"/>
<codefragment>
<![CDATA[
                        Math();
                    } catch (Throwable jjte002) {
                        if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte002;
                            }
                        }
                        if (jjte002 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte002;
                            }
                        }
                        {
                            if (true) throw (Error) jjte002;
                        }
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, 2);
                        }
                    }
                    break;
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="100">
<file line="220" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/lang/ELArithmetic.java"/>
<file line="241" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/lang/ELArithmetic.java"/>
<file line="262" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/lang/ELArithmetic.java"/>
<file line="302" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/embeddedjsp/src/main/java/org/apache/struts2/el/lang/ELArithmetic.java"/>
<codefragment>
<![CDATA[
    public final static Number multiply(final Object obj0, final Object obj1) {
        if (obj0 == null && obj1 == null) {
            return new Long(0);
        }

        final ELArithmetic delegate;
        if (BIGDECIMAL.matches(obj0, obj1))
            delegate = BIGDECIMAL;
        else if (DOUBLE.matches(obj0, obj1))
            delegate = DOUBLE;
        else if (BIGINTEGER.matches(obj0, obj1))
            delegate = BIGINTEGER;
        else
            delegate = LONG;

        Number num0 = delegate.coerce(obj0);
        Number num1 = delegate.coerce(obj1);

        return delegate.multiply(num0, num1);
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="100">
<file line="490" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<file line="525" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/plugins/convention/src/test/java/org/apache/struts2/convention/DefaultResultMapBuilderTest.java"/>
<codefragment>
<![CDATA[
    public void testActionLevelMultipleResultNamesAnnotationNoName() throws Exception {
        ServletContext context = EasyMock.createStrictMock(ServletContext.class);

        // Setup some mock jsps
        Set<String> resources = new HashSet<>();
        EasyMock.expect(context.getResourcePaths("/WEB-INF/location/namespace/")).andReturn(resources);
        EasyMock.replay(context);

        PackageConfig packageConfig = createPackageConfigBuilder("/namespace");

        this.conventionsService = new ConventionsServiceImpl("/WEB-INF/location");
        DefaultResultMapBuilder builder = new DefaultResultMapBuilder(context, container, "dispatcher,velocity,freemarker");
        Map<String, ResultConfig> results = builder.build(ActionLevelResultsNamesAction.class, getAnnotation(ActionLevelResultsNamesAction.class, "noname", Action.class), "action-level-results", packageConfig);
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="100">
<file line="153" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/freemarker/FreeMarkerResultTest.java"/>
<file line="185" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/views/freemarker/FreemarkerResultMockedTest.java"/>
<codefragment>
<![CDATA[
        request = new MockHttpServletRequest();
        stack = ActionContext.getContext().getValueStack();

        context = new ActionContext(stack.getContext());
        context.put(StrutsStatics.HTTP_RESPONSE, response);
        context.put(StrutsStatics.HTTP_REQUEST, request);
        context.put(StrutsStatics.SERVLET_CONTEXT, servletContext);

        ServletActionContext.setServletContext(servletContext);
        ServletActionContext.setRequest(request);
        ServletActionContext.setResponse(response);
        servletContext.setAttribute(FreemarkerManager.CONFIG_SERVLET_CONTEXT_KEY, null);

        invocation = new MockActionInvocation();
        invocation.setStack(stack);
        invocation.setInvocationContext(context);
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="100">
<file line="105" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/FileUploadInterceptorTest.java"/>
<file line="145" path="/home/csi/dle/Desktop/Arcade/subject_systems/Struts2/src/struts-2.5.8/src/core/src/test/java/org/apache/struts2/interceptor/FileUploadInterceptorTest.java"/>
<codefragment>
<![CDATA[
        interceptor.setAllowedExtensions(".txt");

        // when file is of allowed extensions
        ValidationAwareSupport validation = new ValidationAwareSupport();
        boolean ok = interceptor.acceptFile(action, EMPTY_FILE, "filename.txt", "text/plain", "inputName", validation);

        assertTrue(ok);
        assertTrue(validation.getFieldErrors().isEmpty());
        assertFalse(validation.hasErrors());

        // when file is not of allowed extensions
        validation = new ValidationAwareSupport();
        boolean notOk = interceptor.acceptFile(action, EMPTY_FILE, "filename.html", "text/html", "inputName", validation);

        assertFalse(notOk);
        assertFalse(validation.getFieldErrors().isEmpty());
        assertTrue(validation.hasErrors());
]]>
</codefragment>
</duplication>
</pmd-cpd>